{
  "address": "0xbD672fA4abf88D4a9D5fd13e8c2fFA460E0E1850",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subsriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CoinFlip_betAmountTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_incorrectAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_noGameFoundWithThisAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_notEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "amountTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Gameplay.Symbol",
          "name": "_winningSymbol",
          "type": "uint8"
        }
      ],
      "name": "coinFlipResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "gameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_loser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "gameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "gameStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allAvailableGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allFinishedGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allGamesBasedOnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allGamesInProgress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "finishedGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randValue",
          "type": "uint256"
        }
      ],
      "name": "gameLogic",
      "outputs": [
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesInProgress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_joiner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameIdRandomValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "probability",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewGameNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "viewWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wordRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7811f5cac268c7fe36d83a826822a6994f20f3e14809c991a043c94be2fcf0c",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0xbD672fA4abf88D4a9D5fd13e8c2fFA460E0E1850",
    "transactionIndex": 4,
    "gasUsed": "3073752",
    "logsBloom": "0x
    "blockHash": "0xf652ac64ca791807ae2a65f5844fbeb8e42b8cf7492139e12cd190decbe9f2f7",
    "transactionHash": "0xc7811f5cac268c7fe36d83a826822a6994f20f3e14809c991a043c94be2fcf0c",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36646993,
        "transactionHash": "0xc7811f5cac268c7fe36d83a826822a6994f20f3e14809c991a043c94be2fcf0c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000540467feca43907a701311d0721df481d1f9e238",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001b4ce7240642ba8000000000000000000000000000000000000000000000000087aa4556a806e58000000000000000000000000000000000000000000001ffe39eaf6702a2709ae00000000000000000000000000000000000000000000000006c5d5e32a1c42b0000000000000000000000000000000000000000000001ffe3b9fc4e26a8b3556",
        "logIndex": 8,
        "blockHash": "0xf652ac64ca791807ae2a65f5844fbeb8e42b8cf7492139e12cd190decbe9f2f7"
      }
    ],
    "blockNumber": 36646993,
    "cumulativeGasUsed": "3157752",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "50000000000000000",
    "4710",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "2500000"
  ],
  "numDeployments": 4,
  "solcInputHash": "e88e377090befafd8eddb0a23d032665",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subsriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CoinFlip_betAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_incorrectAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_noGameFoundWithThisAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_notEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_winningSymbol\",\"type\":\"uint8\"}],\"name\":\"coinFlipResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_loser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_joiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAvailableGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFinishedGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allGamesBasedOnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allGamesInProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finishedGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randValue\",\"type\":\"uint256\"}],\"name\":\"gameLogic\",\"outputs\":[{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesInProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_joiner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameIdRandomValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"probability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewGameNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"viewWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wordRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jaka Potokar\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Coin Flip mini game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"This contract make a coin flip mini game platform\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gameplay.sol\":\"Gameplay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Gameplay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\n\\n/**@title A Coin Flip mini game\\n * @author Jaka Potokar\\n * @notice This contract make a coin flip mini game platform\\n * @dev This implements the Chainlink VRF Version 2\\n */\\ncontract Gameplay is VRFConsumerBaseV2, ConfirmedOwner {\\n\\n    //ERRORS\\n    error CoinFlip_notEnoughFunds();\\n    error CoinFlip_incorrectAddress();\\n    error CoinFlip_betAmountTooLow();\\n    error CoinFlip_noGameFoundWithThisAmount();\\n\\n    //EVENTS\\n    event gameCreated(uint256 indexed _gameId, address _challenger, uint256 _amount);\\n    event gameStarted(\\n        uint256 indexed _gameId,\\n        address _challenger,\\n        address _joiner,\\n        uint256 _amount\\n    );\\n    event gameFinished(uint256 indexed _gameId, address _winner, address _loser, uint256 _amount);\\n    event amountTransfered(address indexed _sender, address _receiver, uint256 _amount);\\n    event RequestedWinner(uint256 indexed requestId);\\n    event coinFlipResult(uint256 _gameId, Symbol _winningSymbol);\\n\\n    //VRF COORDINATOR VARIABLES\\n    uint64 private immutable s_subscriptionId;\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    bytes32 private immutable s_keyHash;\\n    uint32 private immutable s_callbackGasLimit;\\n    uint16 private immutable requestConfirmations = 3;\\n    uint32 private immutable numWords = 7;\\n\\n    //CONSTRUCTOR\\n    //vrfCoordinator address for mumbai 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n    //vrfCoordinator address for Matic mainnet 0xAE975071Be8F8eE67addBC1A82488F1C24858067\\n    constructor(\\n        address vrfCoordinatorAddress,\\n        uint256 _gameFee,\\n        uint64 subsriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) ConfirmedOwner(msg.sender) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        gameOwner = msg.sender;\\n        gameFee = _gameFee;\\n        s_subscriptionId = subsriptionId;\\n        s_keyHash = keyHash;\\n        s_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    //COIN FLIP VARIABLES\\n\\n    //ENUM HEADS/TAILS, CHANCE OF WIN, GAMEID(updates after every game)\\n    enum Symbol {\\n        Heads,\\n        Tails\\n    }\\n    uint256 public probability = 50;\\n    uint256 public immutable gameFee;\\n    uint256 public gameId;\\n    address private immutable gameOwner;\\n    uint256 public minBet = 100000000000000000; // MIN BET 0.1 MATIC/ETHER\\n\\n    //GAMES STRUCTS, TO GET THE DATA FROM EACH GAME\\n    struct availableGame {\\n        uint256 _gameId;\\n        address _challenger;\\n        uint256 _amount;\\n        Symbol _symbol; // THE CREATOR GETS TO CHOOSE HIS/HERS SYMBOL HEADS/TAILS\\n    }\\n\\n    struct gameInProgress {\\n        uint256 _gameId;\\n        address _challenger;\\n        address _joiner;\\n        uint256 _amount;\\n        Symbol _symbol; // CREATOR CHOOSING OF THE SYMBOL\\n    }\\n\\n    struct finishedGame {\\n        uint256 _gameId;\\n        address _winner;\\n        address _loser;\\n        uint256 _amount;\\n    }\\n\\n    //GAME ARRAYS TO STORE GAMES\\n    availableGame[] public availableGames;\\n    gameInProgress[] public gamesInProgress;\\n    finishedGame[] public finishedGames;\\n\\n    //BALANCE OF USER\\n    mapping(address => uint256) public balance;\\n\\n    //TRANSFER FUNCTIONALITY\\n    function _transfer(address _sender, address _receiver, uint256 _amount) internal {\\n        balance[_sender] -= _amount;\\n        balance[_receiver] += _amount;\\n    }\\n\\n    //DEPOSIT FUNCTION\\n    function deposit() public payable {\\n        balance[msg.sender] += msg.value;\\n    }\\n\\n    //WITHDRAW FUNCTION\\n    function withdraw(uint256 _amount) public payable {\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        balance[msg.sender] -= _amount;\\n        //WITHDRAW CALL\\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    //FUNCTION TO START THE GAME\\n    function startGame(uint256 _amount, Symbol _symbol) public {\\n        if (_amount < minBet) {\\n            revert CoinFlip_betAmountTooLow();\\n        }\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        _transfer(msg.sender, gameOwner, _amount);\\n        availableGames.push(availableGame(gameId, msg.sender, _amount, _symbol));\\n        emit gameCreated(gameId, msg.sender, _amount);\\n        gameId++;\\n    }\\n\\n    //FUNCTION TO LET OWNER CANCEL THE MATCH IF NOBODY ENTERS, THE MONEY IS RETURNED IN FULL\\n    function cancelGame(uint256 _gameId) public {\\n        //FINDING THE GAME WITH THE SAME ID IN AN ARRAY\\n        for (uint256 i = 0; i < availableGames.length; i++) {\\n            if (availableGames[i]._gameId == _gameId) {\\n                if (availableGames[i]._challenger != msg.sender) {\\n                    revert CoinFlip_incorrectAddress();\\n                }\\n                uint256 transferAmount = availableGames[i]._amount;\\n                _transfer(gameOwner, msg.sender, transferAmount);\\n\\n                //POP OUT THE CANCELED GAME\\n                availableGames[i] = availableGames[availableGames.length - 1];\\n                availableGames.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    //FUNCTION TO JOIN A GAME\\n    function joinGame(uint256 _amount) public {\\n        if (_amount < minBet) {\\n            revert CoinFlip_betAmountTooLow();\\n        }\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        uint256 gamejoined;\\n        //FINDING THE GAME THAT HAS THE SAME AMOUNT THAT THE USER WANTS TO PLAY WITH\\n        for (uint256 i = 0; i < availableGames.length; i++) {\\n            if (availableGames[i]._amount == _amount) {\\n                gamesInProgress.push(\\n                    gameInProgress(\\n                        availableGames[i]._gameId,\\n                        availableGames[i]._challenger,\\n                        msg.sender,\\n                        availableGames[i]._amount,\\n                        availableGames[i]._symbol\\n                    )\\n                );\\n                gamejoined = availableGames[i]._gameId;\\n                _transfer(msg.sender, gameOwner, _amount);\\n                emit gameStarted(\\n                    availableGames[i]._gameId,\\n                    availableGames[i]._challenger,\\n                    msg.sender,\\n                    availableGames[i]._amount\\n                );\\n                //POPS OUT GAME OUT OF AVAILABLE GAMES\\n                availableGames[i] = availableGames[availableGames.length - 1];\\n                availableGames.pop();\\n                break;\\n            } else {\\n                if (\\n                    availableGames[i]._gameId == availableGames[availableGames.length - 1]._gameId\\n                ) {\\n                    revert CoinFlip_noGameFoundWithThisAmount();\\n                }\\n            }\\n        }\\n        //HERE WE START THE GAME LOGIC WITH VRF GAMELOGIC AND ENDGAME\\n        requestRandomWords(gamejoined);\\n    }\\n\\n    //FUNCTION WHICH IS CALLED AT THE END OF THE GAME TO TRANSFER TOKENS, STORE FINISHEDGAMES AND DISCARDING THE GAMES OUT OF GAMES IN PROGRESS\\n    function endGame(uint256 _gameId, address _winner, address _loser, uint256 _winnings) internal {\\n        finishedGames.push(finishedGame(_gameId, _winner, _loser, _winnings));\\n        uint256 playerWinnings = _winnings - gameFee;\\n        _transfer(gameOwner, _winner, playerWinnings);\\n        for (uint256 i = 0; i < gamesInProgress.length; i++) {\\n            if (gamesInProgress[i]._gameId == _gameId) {\\n                // delete gamesInProgress[i];\\n                gamesInProgress[i] = gamesInProgress[gamesInProgress.length - 1];\\n                gamesInProgress.pop();\\n                break;\\n            }\\n        }\\n        emit gameFinished(_gameId, _winner, _loser, _winnings);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////\\n    //VRF RANDOMNUMBER CHAINLINK IMPLEMENTATION PART\\n    //VRF FUNCTIONS AND LOGIC\\n\\n    struct subscriptionRequest {\\n        uint256 _gameId;\\n        bool _fulfilled;\\n        uint256[] randomValues;\\n    }\\n\\n    //MAPPING TO MATCH SUBSCRIPTIONID TO THE GAME, BOOL OF FULLFILMENT, AND RANDOMVALUE\\n    mapping(uint256 => subscriptionRequest) public wordRequests;\\n\\n    //START THE VRF RANDOM WORD GENERATOR\\n    function requestRandomWords(uint256 _gameId) internal returns (uint256 requestId) {\\n        requestId = COORDINATOR.requestRandomWords(\\n            s_keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            s_callbackGasLimit,\\n            numWords\\n        );\\n        wordRequests[requestId] = subscriptionRequest(_gameId, false, new uint256[](0));\\n        emit RequestedWinner(requestId);\\n        lastRequestId = requestId;\\n        return requestId;\\n    }\\n\\n    //GET THE WINNER BACK AND END GAME\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        wordRequests[requestId]._fulfilled = true;\\n        wordRequests[requestId].randomValues = randomWords;\\n        Symbol creatorSymbol;\\n        address creator;\\n        address joiner;\\n        uint256 winnings;\\n        for (uint256 i; i < gamesInProgress.length; i++) {\\n            if (gamesInProgress[i]._gameId == wordRequests[requestId]._gameId) {\\n                creatorSymbol = gamesInProgress[i]._symbol;\\n                creator = gamesInProgress[i]._challenger;\\n                joiner = gamesInProgress[i]._joiner;\\n                winnings = gamesInProgress[i]._amount * 2;\\n                break;\\n            }\\n        }\\n        uint256 headWins;\\n        uint256 tailsWins;\\n        for (uint256 i = 0; i < numWords; i++) {\\n            Symbol winningSymbol = gameLogic(randomWords[i]); // CHANGE GAME LOGIC TO ONLY RECEIVE A UINT256\\n            if (winningSymbol == Symbol.Heads) {\\n                headWins++;\\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Heads);\\n            } else {\\n                tailsWins++;\\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Tails);\\n            }\\n            if (headWins > 3) {\\n                winningSymbol = Symbol.Heads;\\n                if (winningSymbol == creatorSymbol) {\\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\\n                } else {\\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\\n                }\\n                break;\\n            }\\n            if (tailsWins > 3) {\\n                winningSymbol = Symbol.Tails;\\n                if (winningSymbol == creatorSymbol) {\\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\\n                } else {\\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\\n                }\\n                break;\\n            }\\n        }\\n    }\\n\\n    //LOGIC COIN FLIP\\n    // if a randomnumber % 100 is more than 50 it is heads, if less then it is tails\\n    function gameLogic(uint256 randValue) public view returns (Symbol) {\\n        uint256 calc = randValue % 100;\\n        Symbol _symbol;\\n        if (calc > probability) {\\n            _symbol = Symbol.Heads;\\n        } else {\\n            _symbol = Symbol.Tails;\\n        }\\n        return _symbol;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    //VIEW FUNCTIONS\\n\\n    //TO GET THE BALANCE OF A PERSON\\n    function balanceOf(address _address) public view returns (uint256) {\\n        return balance[_address];\\n    }\\n\\n    //GET THE NUMBER OF GAMES OPEN BASED ON SPECIFIC AMOUNT A USER WANT TO PLAY WITH\\n    function allGamesBasedOnAmount(uint256 _amount) public view returns (uint256) {\\n        uint256 numberOfGames = 0;\\n        for (uint256 i; i < availableGames.length; i++) {\\n            if (availableGames[i]._amount == _amount) {\\n                numberOfGames++;\\n            }\\n        }\\n        return numberOfGames;\\n    }\\n\\n    //GET THE NUMBER OF AVAILABLE GAMES\\n    function allAvailableGames() public view returns (uint256) {\\n        return availableGames.length;\\n    }\\n\\n    //GET THE NUMBER OF GAMES IN PROGRESS\\n    function allGamesInProgress() public view returns (uint256) {\\n        return gamesInProgress.length;\\n    }\\n\\n    //GET THE NUMBER OF FINISHED GAMES\\n    function allFinishedGames() public view returns (uint256) {\\n        return finishedGames.length;\\n    }\\n\\n    //CHECK WINNER OF THE GAME\\n    function viewWinner(uint256 _gameId) public view returns (address) {\\n        address viewWinnerAddress;\\n        for (uint256 i; i < finishedGames.length; i++) {\\n            if (finishedGames[i]._gameId == _gameId) {\\n                viewWinnerAddress = finishedGames[i]._winner;\\n            }\\n        }\\n        return viewWinnerAddress;\\n    }\\n\\n    //GET GAME NUMBER\\n    function viewGameNumber() public view returns (uint256) {\\n        return gameId;\\n    }\\n\\n    //GET GAME FEE\\n    function getGameFee() public view returns (uint256) {\\n        return gameFee;\\n    }\\n\\n    //TO GET THE RANDOM VALUES - TO TEST THE RANDOMNESS AND GAMELOGIC\\n    uint256 lastRequestId;\\n\\n    function getGameIdRandomValues() public view returns (uint256[] memory) {\\n        return wordRequests[lastRequestId].randomValues;\\n    }\\n}\\n\",\"keccak256\":\"0xa88e4d90969dc21738fdd4284912ca2c9c19c63b85cfe380eadc456382d6c68e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80639966cc83116100ec578063e2a9b85d1161008a578063efaa55a011610064578063efaa55a014610600578063f2fde38b14610629578063f488991c14610652578063fec19e921461068f576101b7565b8063e2a9b85d14610557578063e3d670d714610598578063ea777eec146105d5576101b7565b8063c4f7cac2116100c6578063c4f7cac2146104cc578063ca372f38146104f7578063d0e30db014610522578063d7c81b551461052c576101b7565b80639966cc8314610426578063bdb1175314610466578063c394f68b1461048f576101b7565b80636061b22b1161015957806379ba50971161013357806379ba50971461038e5780638da5cb5b146103a55780639619367d146103d0578063970d6309146103fb576101b7565b80636061b22b146102ea57806369958ab91461032857806370a0823114610351576101b7565b80631fe543e3116101955780631fe543e31461024f5780632e1a7d4d14610278578063481456f9146102945780635bba88f1146102bf576101b7565b806304cd21f6146101bc5780630e9b7aab146101e75780631f197a7314610212575b600080fd5b3480156101c857600080fd5b506101d16106cf565b6040516101de91906128c5565b60405180910390f35b3480156101f357600080fd5b506101fc6106dc565b60405161020991906128c5565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190612920565b6106e9565b604051610246919061298e565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190612b02565b61078f565b005b610292600480360381019061028d9190612920565b61084f565b005b3480156102a057600080fd5b506102a96109ce565b6040516102b691906128c5565b60405180910390f35b3480156102cb57600080fd5b506102d46109d4565b6040516102e191906128c5565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190612920565b6109fc565b60405161031f929190612b79565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190612920565b610a2d565b005b34801561035d57600080fd5b5061037860048036038101906103739190612bce565b610d0c565b60405161038591906128c5565b60405180910390f35b34801561039a57600080fd5b506103a3610d55565b005b3480156103b157600080fd5b506103ba610eea565b6040516103c7919061298e565b60405180910390f35b3480156103dc57600080fd5b506103e5610f13565b6040516103f291906128c5565b60405180910390f35b34801561040757600080fd5b50610410610f19565b60405161041d9190612cb9565b60405180910390f35b34801561043257600080fd5b5061044d60048036038101906104489190612920565b610f87565b60405161045d9493929190612d52565b60405180910390f35b34801561047257600080fd5b5061048d60048036038101906104889190612dbc565b610ff4565b005b34801561049b57600080fd5b506104b660048036038101906104b19190612920565b61122f565b6040516104c391906128c5565b60405180910390f35b3480156104d857600080fd5b506104e161129f565b6040516104ee91906128c5565b60405180910390f35b34801561050357600080fd5b5061050c6112ac565b60405161051991906128c5565b60405180910390f35b61052a6112b6565b005b34801561053857600080fd5b5061054161130e565b60405161054e91906128c5565b60405180910390f35b34801561056357600080fd5b5061057e60048036038101906105799190612920565b611314565b60405161058f959493929190612dfc565b60405180910390f35b3480156105a457600080fd5b506105bf60048036038101906105ba9190612bce565b6113a7565b6040516105cc91906128c5565b60405180910390f35b3480156105e157600080fd5b506105ea6113bf565b6040516105f791906128c5565b60405180910390f35b34801561060c57600080fd5b5061062760048036038101906106229190612920565b6113e3565b005b34801561063557600080fd5b50610650600480360381019061064b9190612bce565b611a5f565b005b34801561065e57600080fd5b5061067960048036038101906106749190612920565b611a73565b6040516106869190612e4f565b60405180910390f35b34801561069b57600080fd5b506106b660048036038101906106b19190612920565b611aa9565b6040516106c69493929190612e6a565b60405180910390f35b6000600780549050905090565b6000600680549050905090565b60008060005b60088054905081101561078557836008828154811061071157610710612eaf565b5b9060005260206000209060040201600001541415610772576008818154811061073d5761073c612eaf565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b808061077d90612f0d565b9150506106ef565b5080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610838929190612f56565b60405180910390fd5b61084b8282611b29565b5050565b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108c8576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109179190612f7f565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161094490612fe4565b60006040518083038185875af1925050503d8060008114610981576040519150601f19603f3d011682016040523d82523d6000602084013e610986565b606091505b50509050806109ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c190613056565b60405180910390fd5b5050565b60035481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600a6020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b60005b600680549050811015610d08578160068281548110610a5257610a51612eaf565b5b9060005260206000209060040201600001541415610cf5573373ffffffffffffffffffffffffffffffffffffffff1660068281548110610a9557610a94612eaf565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b14576040517fff408ef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060068281548110610b2a57610b29612eaf565b5b9060005260206000209060040201600201549050610b697f00000000000000000000000000000000000000000000000000000000000000003383611f69565b60066001600680549050610b7d9190612f7f565b81548110610b8e57610b8d612eaf565b5b906000526020600020906004020160068381548110610bb057610baf612eaf565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff02191690836001811115610c7157610c70612cdb565b5b02179055509050506006805480610c8b57610c8a613076565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff02191690555050905550610d08565b8080610d0090612f0d565b915050610a30565b5050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc906130f1565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055481565b6060600a6000600b548152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610f7d57602002820191906000526020600020905b815481526020019060010190808311610f69575b5050505050905090565b60068181548110610f9757600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b600554821015611030576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110a9576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110d4337f000000000000000000000000000000000000000000000000000000000000000084611f69565b6006604051806080016040528060045481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600181111561111e5761111d612cdb565b5b81525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff021916908360018111156111d0576111cf612cdb565b5b021790555050506004547feb9636322c1d272bc67c0a5514c23440570a8938048a82c4dc2e366a7c2e924c338460405161120b929190613111565b60405180910390a26004600081548092919061122690612f0d565b91905055505050565b6000806000905060005b60068054905081101561129557836006828154811061125b5761125a612eaf565b5b906000526020600020906004020160020154141561128257818061127e90612f0d565b9250505b808061128d90612f0d565b915050611239565b5080915050919050565b6000600880549050905090565b6000600454905090565b34600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611305919061313a565b92505081905550565b60045481565b6007818154811061132457600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b60096020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481101561141f576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611498576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600680549050811015611a505782600682815481106114c2576114c1612eaf565b5b90600052602060002090600402016002015414156119a85760076040518060a00160405280600684815481106114fb576114fa612eaf565b5b90600052602060002090600402016000015481526020016006848154811061152657611525612eaf565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600684815481106115a3576115a2612eaf565b5b9060005260206000209060040201600201548152602001600684815481106115ce576115cd612eaf565b5b906000526020600020906004020160030160009054906101000a900460ff1660018111156115ff576115fe612cdb565b5b81525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908360018111156116f8576116f7612cdb565b5b021790555050506006818154811061171357611712612eaf565b5b9060005260206000209060040201600001549150611752337f000000000000000000000000000000000000000000000000000000000000000085611f69565b6006818154811061176657611765612eaf565b5b9060005260206000209060040201600001547fb73fedad77ff3493782cb4a621d435ad604fdccefeb292138446daff5f428e9b600683815481106117ad576117ac612eaf565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633600685815481106117f4576117f3612eaf565b5b90600052602060002090600402016002015460405161181593929190613190565b60405180910390a2600660016006805490506118319190612f7f565b8154811061184257611841612eaf565b5b90600052602060002090600402016006828154811061186457611863612eaf565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083600181111561192557611924612cdb565b5b0217905550905050600680548061193f5761193e613076565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff021916905550509055611a50565b600660016006805490506119bc9190612f7f565b815481106119cd576119cc612eaf565b5b906000526020600020906004020160000154600682815481106119f3576119f2612eaf565b5b9060005260206000209060040201600001541415611a3d576040517f6b651f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080611a4890612f0d565b9150506114a0565b50611a5a8161201a565b505050565b611a67612261565b611a70816122f1565b50565b600080606483611a8391906131f6565b90506000600354821115611a9a5760009050611a9f565b600190505b8092505050919050565b60088181548110611ab957600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b6001600a600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555080600a60008481526020019081526020016000206002019080519060200190611b82929190612842565b5060008060008060005b600780549050811015611ced57600a60008881526020019081526020016000206000015460078281548110611bc457611bc3612eaf565b5b9060005260206000209060050201600001541415611cda5760078181548110611bf057611bef612eaf565b5b906000526020600020906005020160040160009054906101000a900460ff16945060078181548110611c2557611c24612eaf565b5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935060078181548110611c6d57611c6c612eaf565b5b906000526020600020906005020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600260078281548110611cb757611cb6612eaf565b5b906000526020600020906005020160030154611cd39190613227565b9150611ced565b8080611ce590612f0d565b915050611b8c565b5060008060005b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16811015611f5e576000611d47898381518110611d3a57611d39612eaf565b5b6020026020010151611a73565b905060006001811115611d5d57611d5c612cdb565b5b816001811115611d7057611d6f612cdb565b5b1415611dd9578380611d8190612f0d565b9450507f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600a60008c8152602001908152602001600020600001546000604051611dcc929190613281565b60405180910390a1611e38565b8280611de490612f0d565b9350507f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600a60008c8152602001908152602001600020600001546001604051611e2f929190613281565b60405180910390a15b6003841115611ec15760009050876001811115611e5857611e57612cdb565b5b816001811115611e6b57611e6a612cdb565b5b1415611e9857611e93600a60008c81526020019081526020016000206000015488888861241e565b611ebb565b611eba600a60008c81526020019081526020016000206000015487898861241e565b5b50611f5e565b6003831115611f4a5760019050876001811115611ee157611ee0612cdb565b5b816001811115611ef457611ef3612cdb565b5b1415611f2157611f1c600a60008c81526020019081526020016000206000015488888861241e565b611f44565b611f43600a60008c81526020019081526020016000206000015487898861241e565b5b50611f5e565b508080611f5690612f0d565b915050611cf4565b505050505050505050565b80600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb89190612f7f565b9250508190555080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200e919061313a565b92505081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040161211f959493929190613322565b6020604051808303816000875af115801561213e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612162919061338a565b90506040518060600160405280838152602001600015158152602001600067ffffffffffffffff811115612199576121986129bf565b5b6040519080825280602002602001820160405280156121c75781602001602082028036833780820191505090505b50815250600a60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002019080519060200190612224929190612842565b50905050807fb67476d1d38e93caac2ca37113122e613c199269c4cea0d39c67807a6442b40a60405160405180910390a280600b81905550919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e690613403565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123579061346f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600860405180608001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155505060007f0000000000000000000000000000000000000000000000000000000000000000826125689190612f7f565b90506125957f00000000000000000000000000000000000000000000000000000000000000008583611f69565b60005b6007805490508110156127fe5785600782815481106125ba576125b9612eaf565b5b90600052602060002090600502016000015414156127eb57600760016007805490506125e69190612f7f565b815481106125f7576125f6612eaf565b5b90600052602060002090600502016007828154811061261957612618612eaf565b5b9060005260206000209060050201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600181111561274157612740612cdb565b5b0217905550905050600780548061275b5761275a613076565b5b60019003818190600052602060002090600502016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549060ff0219169055505090556127fe565b80806127f690612f0d565b915050612598565b50847f3c40e3fa45e773a9814996991ed01608da066c59f6a5630c214b1e1151836f4b85858560405161283393929190613190565b60405180910390a25050505050565b82805482825590600052602060002090810192821561287e579160200282015b8281111561287d578251825591602001919060010190612862565b5b50905061288b919061288f565b5090565b5b808211156128a8576000816000905550600101612890565b5090565b6000819050919050565b6128bf816128ac565b82525050565b60006020820190506128da60008301846128b6565b92915050565b6000604051905090565b600080fd5b600080fd5b6128fd816128ac565b811461290857600080fd5b50565b60008135905061291a816128f4565b92915050565b600060208284031215612936576129356128ea565b5b60006129448482850161290b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129788261294d565b9050919050565b6129888161296d565b82525050565b60006020820190506129a3600083018461297f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129f7826129ae565b810181811067ffffffffffffffff82111715612a1657612a156129bf565b5b80604052505050565b6000612a296128e0565b9050612a3582826129ee565b919050565b600067ffffffffffffffff821115612a5557612a546129bf565b5b602082029050602081019050919050565b600080fd5b6000612a7e612a7984612a3a565b612a1f565b90508083825260208201905060208402830185811115612aa157612aa0612a66565b5b835b81811015612aca5780612ab6888261290b565b845260208401935050602081019050612aa3565b5050509392505050565b600082601f830112612ae957612ae86129a9565b5b8135612af9848260208601612a6b565b91505092915050565b60008060408385031215612b1957612b186128ea565b5b6000612b278582860161290b565b925050602083013567ffffffffffffffff811115612b4857612b476128ef565b5b612b5485828601612ad4565b9150509250929050565b60008115159050919050565b612b7381612b5e565b82525050565b6000604082019050612b8e60008301856128b6565b612b9b6020830184612b6a565b9392505050565b612bab8161296d565b8114612bb657600080fd5b50565b600081359050612bc881612ba2565b92915050565b600060208284031215612be457612be36128ea565b5b6000612bf284828501612bb9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c30816128ac565b82525050565b6000612c428383612c27565b60208301905092915050565b6000602082019050919050565b6000612c6682612bfb565b612c708185612c06565b9350612c7b83612c17565b8060005b83811015612cac578151612c938882612c36565b9750612c9e83612c4e565b925050600181019050612c7f565b5085935050505092915050565b60006020820190508181036000830152612cd38184612c5b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612d1b57612d1a612cdb565b5b50565b6000819050612d2c82612d0a565b919050565b6000612d3c82612d1e565b9050919050565b612d4c81612d31565b82525050565b6000608082019050612d6760008301876128b6565b612d74602083018661297f565b612d8160408301856128b6565b612d8e6060830184612d43565b95945050505050565b60028110612da457600080fd5b50565b600081359050612db681612d97565b92915050565b60008060408385031215612dd357612dd26128ea565b5b6000612de18582860161290b565b9250506020612df285828601612da7565b9150509250929050565b600060a082019050612e1160008301886128b6565b612e1e602083018761297f565b612e2b604083018661297f565b612e3860608301856128b6565b612e456080830184612d43565b9695505050505050565b6000602082019050612e646000830184612d43565b92915050565b6000608082019050612e7f60008301876128b6565b612e8c602083018661297f565b612e99604083018561297f565b612ea660608301846128b6565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f18826128ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f4b57612f4a612ede565b5b600182019050919050565b6000604082019050612f6b600083018561297f565b612f78602083018461297f565b9392505050565b6000612f8a826128ac565b9150612f95836128ac565b925082821015612fa857612fa7612ede565b5b828203905092915050565b600081905092915050565b50565b6000612fce600083612fb3565b9150612fd982612fbe565b600082019050919050565b6000612fef82612fc1565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000613040600b83612ff9565b915061304b8261300a565b602082019050919050565b6000602082019050818103600083015261306f81613033565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006130db601683612ff9565b91506130e6826130a5565b602082019050919050565b6000602082019050818103600083015261310a816130ce565b9050919050565b6000604082019050613126600083018561297f565b61313360208301846128b6565b9392505050565b6000613145826128ac565b9150613150836128ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561318557613184612ede565b5b828201905092915050565b60006060820190506131a5600083018661297f565b6131b2602083018561297f565b6131bf60408301846128b6565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613201826128ac565b915061320c836128ac565b92508261321c5761321b6131c7565b5b828206905092915050565b6000613232826128ac565b915061323d836128ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561327657613275612ede565b5b828202905092915050565b600060408201905061329660008301856128b6565b6132a36020830184612d43565b9392505050565b6000819050919050565b6132bd816132aa565b82525050565b600067ffffffffffffffff82169050919050565b6132e0816132c3565b82525050565b600061ffff82169050919050565b6132fd816132e6565b82525050565b600063ffffffff82169050919050565b61331c81613303565b82525050565b600060a08201905061333760008301886132b4565b61334460208301876132d7565b61335160408301866132f4565b61335e6060830185613313565b61336b6080830184613313565b9695505050505050565b600081519050613384816128f4565b92915050565b6000602082840312156133a05761339f6128ea565b5b60006133ae84828501613375565b91505092915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006133ed601683612ff9565b91506133f8826133b7565b602082019050919050565b6000602082019050818103600083015261341c816133e0565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000613459601783612ff9565b915061346482613423565b602082019050919050565b600060208201905081810360008301526134888161344c565b905091905056fea26469706673582212201f2a095d5e530a37950fecea6b7f1271ce5f3ca38286525910730bacc18a8f7664736f6c634300080a0033",
  "devdoc": {
    "author": "Jaka Potokar",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {},
    "title": "A Coin Flip mini game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "This contract make a coin flip mini game platform",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1379,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(VRFCoordinatorV2Interface)446"
      },
      {
        "astId": 1443,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "probability",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1447,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "gameId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1452,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "minBet",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1487,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "availableGames",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(availableGame)1462_storage)dyn_storage"
      },
      {
        "astId": 1491,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "gamesInProgress",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(gameInProgress)1474_storage)dyn_storage"
      },
      {
        "astId": 1495,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "finishedGames",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(finishedGame)1483_storage)dyn_storage"
      },
      {
        "astId": 1499,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "balance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1939,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "wordRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(subscriptionRequest)1934_storage)"
      },
      {
        "astId": 2376,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(availableGame)1462_storage)dyn_storage": {
        "base": "t_struct(availableGame)1462_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.availableGame[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(finishedGame)1483_storage)dyn_storage": {
        "base": "t_struct(finishedGame)1483_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.finishedGame[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(gameInProgress)1474_storage)dyn_storage": {
        "base": "t_struct(gameInProgress)1474_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.gameInProgress[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)446": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(Symbol)1440": {
        "encoding": "inplace",
        "label": "enum Gameplay.Symbol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(subscriptionRequest)1934_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gameplay.subscriptionRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(subscriptionRequest)1934_storage"
      },
      "t_struct(availableGame)1462_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.availableGame",
        "members": [
          {
            "astId": 1454,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1456,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_challenger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1458,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1461,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Symbol)1440"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(finishedGame)1483_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.finishedGame",
        "members": [
          {
            "astId": 1476,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1478,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_winner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1480,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_loser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1482,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(gameInProgress)1474_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.gameInProgress",
        "members": [
          {
            "astId": 1464,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1466,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_challenger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1468,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_joiner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1470,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1473,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Symbol)1440"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(subscriptionRequest)1934_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.subscriptionRequest",
        "members": [
          {
            "astId": 1928,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1930,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1933,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "randomValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}