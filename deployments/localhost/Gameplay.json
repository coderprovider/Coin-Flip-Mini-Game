{
  "address": "0xFD296cCDB97C605bfdE514e9810eA05f421DEBc2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gameFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subsriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_gamecoins",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CoinFlip_betAmountTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_incorrectAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_noGameFoundWithThisAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_notAnNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoinFlip_notEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "amountTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Gameplay.Symbol",
          "name": "_winningSymbol",
          "type": "uint8"
        }
      ],
      "name": "coinFlipResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Gameplay.Symbol",
          "name": "_creatorSymbol",
          "type": "uint8"
        }
      ],
      "name": "gameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_loser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "gameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Gameplay.Symbol",
          "name": "_creatorSymbol",
          "type": "uint8"
        }
      ],
      "name": "gameStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allAvailableGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allFinishedGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allGamesBasedOnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allGamesInProgress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "finishedGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randValue",
          "type": "uint256"
        }
      ],
      "name": "gameLogic",
      "outputs": [
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamecoins",
      "outputs": [
        {
          "internalType": "contract GameCoins",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesInProgress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_joiner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameIdRandomValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "probability",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Gameplay.Symbol",
          "name": "_symbol",
          "type": "uint8"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewGameNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "viewWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wordRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac337d690283dfb76de587ad9e54d772aef15ba11b274643d4aa632d11b6bc82",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xFD296cCDB97C605bfdE514e9810eA05f421DEBc2",
    "transactionIndex": 0,
    "gasUsed": "3535197",
    "logsBloom": "0x
    "blockHash": "0x145c5aca0cc3ca691ac3532bc25925e6062c870ecdc0735b0d80c8cdb7505d0b",
    "transactionHash": "0xac337d690283dfb76de587ad9e54d772aef15ba11b274643d4aa632d11b6bc82",
    "logs": [],
    "blockNumber": 18878038,
    "cumulativeGasUsed": "3535197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9852795dbb01913439f534b4984fBf74aC8AfA12",
    "5000000000000000000",
    "1",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "2500000",
    "0x889D9A5AF83525a2275e41464FAECcCb3337fF60"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe9121ebce97acdf99391599a040de4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subsriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_gamecoins\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CoinFlip_betAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_incorrectAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_noGameFoundWithThisAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_notAnNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinFlip_notEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_winningSymbol\",\"type\":\"uint8\"}],\"name\":\"coinFlipResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_creatorSymbol\",\"type\":\"uint8\"}],\"name\":\"gameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_loser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_joiner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_creatorSymbol\",\"type\":\"uint8\"}],\"name\":\"gameStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAvailableGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFinishedGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allGamesBasedOnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allGamesInProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finishedGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randValue\",\"type\":\"uint256\"}],\"name\":\"gameLogic\",\"outputs\":[{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamecoins\",\"outputs\":[{\"internalType\":\"contract GameCoins\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesInProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_joiner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameIdRandomValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"probability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Gameplay.Symbol\",\"name\":\"_symbol\",\"type\":\"uint8\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewGameNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"viewWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wordRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jaka Potokar\",\"details\":\"This implements the Chainlink VRF Version 2 MY NOTICE: CORRECT THE TRANSFER FUNCTION BECAUSE IT CAN GET HACKED, BECAUSE CALLER DOESN'T NEED TO BE REQUIRED\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Coin Flip mini game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"This contract make a coin flip mini game platform\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gameplay.sol\":\"Gameplay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GameCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract GameCoins is ERC721, Ownable {\\n    //ERRORS\\n    error GameCoins_AlreadyOwnsACoin();\\n    error GameCoins_AddressNotAllowedThisFunction();\\n    error GameCoins_NotEnoughValueSent();\\n    error GameCoins_ContractAlreadyConnected();\\n    error GameCoins_TokenIdDoesntExist();\\n    error GameCoins_AddressIsNotAnOwner();\\n\\n    //COIN COUNTER\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private TOKENURI;\\n    uint256 public mintPrice;\\n    struct coinAttributes {\\n        uint256 _wins;\\n        uint256 _losses;\\n        int256 _amountWon;\\n    }\\n    address private contractOwner;\\n\\n    //MODIFIER FOR CONTRACT OWNERSHIP\\n    modifier isContractOwner() {\\n        if (msg.sender != contractOwner) {\\n            revert GameCoins_AddressNotAllowedThisFunction();\\n        }\\n        _;\\n    }\\n\\n    //MODIFIER FOR APPROVED CONTRACTS\\n    modifier connectedContract() {\\n        bool contractIsConnected = false;\\n        for (uint256 i; i < connectedContracts.length; i++) {\\n            if (connectedContracts[i] == msg.sender) {\\n                contractIsConnected = true;\\n                break;\\n            }\\n        }\\n        if (!contractIsConnected) {\\n            revert GameCoins_AddressNotAllowedThisFunction();\\n        }\\n        _;\\n    }\\n\\n    //MAPPING TO STORE TOKENATTRIBUTES\\n    mapping(uint256 => coinAttributes) public addressAttributes;\\n\\n    constructor(string memory _tokenURI, uint256 _mintPrice) ERC721(\\\"GAMECOINS\\\", \\\"GMC\\\") {\\n        TOKENURI = _tokenURI;\\n        contractOwner = msg.sender;\\n        mintPrice = _mintPrice;\\n    }\\n\\n    //PERMISSION TO ADD AND WINS, LOSSES, AMOUNT WON\\n    //In case there will be more games that will use these nfts\\n    address[] public connectedContracts;\\n\\n    function addContract(address _contract) public isContractOwner {\\n        for (uint256 i; i < connectedContracts.length; i++) {\\n            if (connectedContracts[i] == _contract) {\\n                revert GameCoins_ContractAlreadyConnected();\\n            }\\n        }\\n        connectedContracts.push(_contract);\\n    }\\n\\n    //MINTING THE NFT, NO WHITELIST REQUIRED, ONLY ONE PER PERSON\\n    function nftMint() public payable {\\n        if (balanceOf(msg.sender) > 0) {\\n            revert GameCoins_AlreadyOwnsACoin();\\n            //Only one coin per person\\n        }\\n        if (msg.sender != tx.origin) {\\n            revert GameCoins_AddressNotAllowedThisFunction();\\n            //Only wallets allowed, no smart contracts\\n        }\\n        if (msg.value < mintPrice) {\\n            revert GameCoins_NotEnoughValueSent();\\n        }\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(msg.sender, tokenId);\\n        addressAttributes[tokenId] = coinAttributes(0, 0, 0);\\n        _tokenIdCounter.increment();\\n    }\\n\\n    //ADS THE TOKEN URI\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        // require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return TOKENURI;\\n    }\\n\\n    //VIEWING ATTRIBUTES BASED ON TOKEN ID\\n    function seeAttributes(uint256 _tokenId) public view returns (coinAttributes memory) {\\n        if (_tokenId > _tokenIdCounter.current()) {\\n            revert GameCoins_TokenIdDoesntExist();\\n        }\\n        return addressAttributes[_tokenId];\\n    }\\n\\n    function getWins(uint256 _tokenId) public view returns (uint256) {\\n        if (_tokenId > _tokenIdCounter.current()) {\\n            revert GameCoins_TokenIdDoesntExist();\\n        }\\n        return addressAttributes[_tokenId]._wins;\\n    }\\n\\n    function getLosses(uint256 _tokenId) public view returns (uint256) {\\n        if (_tokenId > _tokenIdCounter.current()) {\\n            revert GameCoins_TokenIdDoesntExist();\\n        }\\n        return addressAttributes[_tokenId]._losses;\\n    }\\n\\n    function getAmountWon(uint256 _tokenId) public view returns (int256) {\\n        if (_tokenId > _tokenIdCounter.current()) {\\n            revert GameCoins_TokenIdDoesntExist();\\n        }\\n        return addressAttributes[_tokenId]._amountWon;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return _tokenIdCounter.current();\\n    }\\n\\n    //TO FIND THE TOKENID OF THE OWNER\\n    function getOwnersToken(address _ownerAddress) public view returns (uint256) {\\n        if (balanceOf(_ownerAddress) == 0) {\\n            revert GameCoins_AddressIsNotAnOwner();\\n        }\\n        uint256 ownerTokenId;\\n        for (uint256 i; i < _tokenIdCounter.current(); i++) {\\n            if (ownerOf(i) == _ownerAddress) {\\n                ownerTokenId = i;\\n            }\\n        }\\n        return ownerTokenId;\\n    }\\n\\n    //RETURNS IF THE CONTRACT IS APPROVED BY THIS CONTRACT\\n    function isContractConnected(address _address) public view returns (bool) {\\n        bool isConnected = false;\\n        for (uint256 i; i < connectedContracts.length; i++) {\\n            if (_address == connectedContracts[i]) {\\n                isConnected = true;\\n                break;\\n            }\\n        }\\n        return isConnected;\\n    }\\n\\n    //ADDING ATTRIBUTES, ONLY IF A CONTRACT IS APPROVED\\n    function addWin(uint256 _tokenId) external connectedContract {\\n        addressAttributes[_tokenId]._wins += 1;\\n    }\\n\\n    function addLoss(uint256 _tokenId) external connectedContract {\\n        addressAttributes[_tokenId]._losses += 1;\\n    }\\n\\n    function changeAmountWon(uint256 _tokenId, int256 _amount) external connectedContract {\\n        addressAttributes[_tokenId]._amountWon += _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x82ce7c7534098d47bfff433d5b56d03e67c74c8bb2424010066b49e6ce2f0af2\",\"license\":\"MIT\"},\"contracts/Gameplay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./GameCoin.sol\\\";\\n\\n// ADD IN INDEXED AT CREATE AND JOIN GAME AT ACCOUNT, CREATE CRETORSYMBOL IN MAPPING AND EVENT\\n\\n/**@title A Coin Flip mini game\\n * @author Jaka Potokar\\n * @notice This contract make a coin flip mini game platform\\n * @dev This implements the Chainlink VRF Version 2\\n * MY NOTICE: CORRECT THE TRANSFER FUNCTION BECAUSE IT CAN GET HACKED, BECAUSE CALLER DOESN'T NEED TO BE REQUIRED\\n */\\ncontract Gameplay is VRFConsumerBaseV2, ConfirmedOwner {\\n    //ERRORS\\n    error CoinFlip_notEnoughFunds();\\n    error CoinFlip_incorrectAddress();\\n    error CoinFlip_betAmountTooLow();\\n    error CoinFlip_noGameFoundWithThisAmount();\\n    error CoinFlip_notAnNftOwner();\\n\\n    //EVENTS\\n    event gameCreated(\\n        uint256 indexed _gameId,\\n        address indexed _challenger,\\n        uint256 _amount,\\n        Symbol _creatorSymbol\\n    );\\n    event gameStarted(\\n        uint256 indexed _gameId,\\n        address indexed _challenger,\\n        address indexed _joiner,\\n        uint256 _amount,\\n        Symbol _creatorSymbol\\n    );\\n    event gameFinished(\\n        uint256 indexed _gameId,\\n        address indexed _winner,\\n        address indexed _loser,\\n        uint256 _amount\\n    );\\n    event amountTransfered(address indexed _sender, address indexed _receiver, uint256 _amount);\\n    event RequestedWinner(uint256 indexed requestId);\\n    event coinFlipResult(uint256 indexed _gameId, Symbol _winningSymbol);\\n\\n    //VRF COORDINATOR VARIABLES\\n    uint64 private immutable s_subscriptionId;\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    bytes32 private immutable s_keyHash;\\n    uint32 private immutable s_callbackGasLimit;\\n    uint16 private immutable requestConfirmations = 3;\\n    uint32 private immutable numWords = 7;\\n    GameCoins public gamecoins;\\n\\n    //CONSTRUCTOR\\n    //vrfCoordinator address for mumbai 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n    //vrfCoordinator address for Matic mainnet 0xAE975071Be8F8eE67addBC1A82488F1C24858067\\n    constructor(\\n        address vrfCoordinatorAddress,\\n        uint256 _gameFee,\\n        uint64 subsriptionId,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        address _gamecoins\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) ConfirmedOwner(msg.sender) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        gameOwner = msg.sender;\\n        gameFee = _gameFee;\\n        s_subscriptionId = subsriptionId;\\n        s_keyHash = keyHash;\\n        s_callbackGasLimit = callbackGasLimit;\\n        gamecoins = GameCoins(_gamecoins);\\n    }\\n\\n    //CHECKS IF THE ADDRESS OWNS THE NFT\\n    modifier nftOwner() {\\n        if (gamecoins.balanceOf(msg.sender) == 0) {\\n            revert CoinFlip_notAnNftOwner();\\n        }\\n        _;\\n    }\\n\\n    //COIN FLIP VARIABLES\\n    //ENUM HEADS/TAILS, CHANCE OF WIN, GAMEID(updates after every game)\\n    enum Symbol {\\n        Heads,\\n        Tails\\n    }\\n    uint256 public probability = 50;\\n    uint256 public immutable gameFee;\\n    uint256 public gameId;\\n    address private immutable gameOwner;\\n    uint256 public minBet = 100000000000000000; // MIN BET 0.1 MATIC/ETHER\\n\\n    //GAMES STRUCTS, TO GET THE DATA FROM EACH GAME\\n    struct availableGame {\\n        uint256 _gameId;\\n        address _challenger;\\n        uint256 _amount;\\n        Symbol _symbol; // THE CREATOR GETS TO CHOOSE HIS/HERS SYMBOL HEADS/TAILS\\n    }\\n\\n    struct gameInProgress {\\n        uint256 _gameId;\\n        address _challenger;\\n        address _joiner;\\n        uint256 _amount;\\n        Symbol _symbol; // CREATOR CHOOSING OF THE SYMBOL\\n    }\\n\\n    struct finishedGame {\\n        uint256 _gameId;\\n        address _winner;\\n        address _loser;\\n        uint256 _amount;\\n    }\\n\\n    //GAME ARRAYS TO STORE GAMES\\n    availableGame[] public availableGames;\\n    gameInProgress[] public gamesInProgress;\\n    finishedGame[] public finishedGames;\\n\\n    //BALANCE OF USER\\n    mapping(address => uint256) public balance;\\n\\n    //TRANSFER FUNCTIONALITY\\n    function _transfer(address _sender, address _receiver, uint256 _amount) internal {\\n        balance[_sender] -= _amount;\\n        balance[_receiver] += _amount;\\n    }\\n\\n    //DEPOSIT FUNCTION\\n    function deposit() public payable {\\n        balance[msg.sender] += msg.value;\\n    }\\n\\n    //WITHDRAW FUNCTION\\n    function withdraw(uint256 _amount) public payable {\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        balance[msg.sender] -= _amount;\\n        //WITHDRAW CALL\\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    //FUNCTION TO START THE GAME\\n    function startGame(uint256 _amount, Symbol _symbol) public nftOwner {\\n        if (_amount < minBet) {\\n            revert CoinFlip_betAmountTooLow();\\n        }\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        _transfer(msg.sender, gameOwner, _amount);\\n        availableGames.push(availableGame(gameId, msg.sender, _amount, _symbol));\\n        emit gameCreated(gameId, msg.sender, _amount, _symbol);\\n        gameId++;\\n    }\\n\\n    //FUNCTION TO LET OWNER CANCEL THE MATCH IF NOBODY ENTERS, THE MONEY IS RETURNED IN FULL\\n    function cancelGame(uint256 _gameId) public nftOwner {\\n        //FINDING THE GAME WITH THE SAME ID IN AN ARRAY\\n        for (uint256 i = 0; i < availableGames.length; i++) {\\n            if (availableGames[i]._gameId == _gameId) {\\n                if (availableGames[i]._challenger != msg.sender) {\\n                    revert CoinFlip_incorrectAddress();\\n                }\\n                uint256 transferAmount = availableGames[i]._amount;\\n                _transfer(gameOwner, msg.sender, transferAmount);\\n\\n                //POP OUT THE CANCELED GAME\\n                availableGames[i] = availableGames[availableGames.length - 1];\\n                availableGames.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    //FUNCTION TO JOIN A GAME\\n    function joinGame(uint256 _amount) public nftOwner {\\n        if (_amount < minBet) {\\n            revert CoinFlip_betAmountTooLow();\\n        }\\n        if (balance[msg.sender] < _amount) {\\n            revert CoinFlip_notEnoughFunds();\\n        }\\n        uint256 gamejoined;\\n        //FINDING THE GAME THAT HAS THE SAME AMOUNT THAT THE USER WANTS TO PLAY WITH\\n        for (uint256 i = 0; i < availableGames.length; i++) {\\n            if (availableGames[i]._amount == _amount) {\\n                gamesInProgress.push(\\n                    gameInProgress(\\n                        availableGames[i]._gameId,\\n                        availableGames[i]._challenger,\\n                        msg.sender,\\n                        availableGames[i]._amount,\\n                        availableGames[i]._symbol\\n                    )\\n                );\\n                gamejoined = availableGames[i]._gameId;\\n                _transfer(msg.sender, gameOwner, _amount);\\n                emit gameStarted(\\n                    availableGames[i]._gameId,\\n                    availableGames[i]._challenger,\\n                    msg.sender,\\n                    availableGames[i]._amount,\\n                    availableGames[i]._symbol\\n                );\\n                //POPS OUT GAME OUT OF AVAILABLE GAMES\\n                availableGames[i] = availableGames[availableGames.length - 1];\\n                availableGames.pop();\\n                break;\\n            } else {\\n                if (\\n                    availableGames[i]._gameId == availableGames[availableGames.length - 1]._gameId\\n                ) {\\n                    revert CoinFlip_noGameFoundWithThisAmount();\\n                }\\n            }\\n        }\\n        //HERE WE START THE GAME LOGIC WITH VRF GAMELOGIC AND ENDGAME\\n        requestRandomWords(gamejoined);\\n    }\\n\\n    //FUNCTION WHICH IS CALLED AT THE END OF THE GAME TO TRANSFER TOKENS, STORE FINISHEDGAMES AND DISCARDING THE GAMES OUT OF GAMES IN PROGRESS\\n    function endGame(uint256 _gameId, address _winner, address _loser, uint256 _winnings) internal {\\n        finishedGames.push(finishedGame(_gameId, _winner, _loser, _winnings));\\n        uint256 playerWinnings = _winnings - gameFee;\\n        _transfer(gameOwner, _winner, playerWinnings);\\n        for (uint256 i = 0; i < gamesInProgress.length; i++) {\\n            if (gamesInProgress[i]._gameId == _gameId) {\\n                // delete gamesInProgress[i];\\n                gamesInProgress[i] = gamesInProgress[gamesInProgress.length - 1];\\n                gamesInProgress.pop();\\n                break;\\n            }\\n        }\\n        emit gameFinished(_gameId, _winner, _loser, _winnings);\\n\\n        //TO CHANGE NFT STATS\\n        uint256 winnersNFT = gamecoins.getOwnersToken(_winner);\\n        uint256 losersNFT = gamecoins.getOwnersToken(_loser);\\n        gamecoins.addWin(winnersNFT);\\n        gamecoins.addLoss(losersNFT);\\n        gamecoins.changeAmountWon(winnersNFT, int256(_winnings / 2));\\n        gamecoins.changeAmountWon(losersNFT, -int256(_winnings / 2));\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////\\n    //VRF RANDOMNUMBER CHAINLINK IMPLEMENTATION PART\\n    //VRF FUNCTIONS AND LOGIC\\n\\n    struct subscriptionRequest {\\n        uint256 _gameId;\\n        bool _fulfilled;\\n        uint256[] randomValues;\\n    }\\n\\n    //MAPPING TO MATCH SUBSCRIPTIONID TO THE GAME, BOOL OF FULLFILMENT, AND RANDOMVALUE\\n    mapping(uint256 => subscriptionRequest) public wordRequests;\\n\\n    //START THE VRF RANDOM WORD GENERATOR\\n    function requestRandomWords(uint256 _gameId) internal returns (uint256 requestId) {\\n        requestId = COORDINATOR.requestRandomWords(\\n            s_keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            s_callbackGasLimit,\\n            numWords\\n        );\\n        wordRequests[requestId] = subscriptionRequest(_gameId, false, new uint256[](0));\\n        emit RequestedWinner(requestId);\\n        lastRequestId = requestId;\\n        return requestId;\\n    }\\n\\n    //GET THE WINNER BACK AND END GAME\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        wordRequests[requestId]._fulfilled = true;\\n        wordRequests[requestId].randomValues = randomWords;\\n        Symbol creatorSymbol;\\n        address creator;\\n        address joiner;\\n        uint256 winnings;\\n        for (uint256 i; i < gamesInProgress.length; i++) {\\n            if (gamesInProgress[i]._gameId == wordRequests[requestId]._gameId) {\\n                creatorSymbol = gamesInProgress[i]._symbol;\\n                creator = gamesInProgress[i]._challenger;\\n                joiner = gamesInProgress[i]._joiner;\\n                winnings = gamesInProgress[i]._amount * 2;\\n                break;\\n            }\\n        }\\n        uint256 headWins;\\n        uint256 tailsWins;\\n        for (uint256 i = 0; i < numWords; i++) {\\n            Symbol winningSymbol = gameLogic(randomWords[i]); // CHANGE GAME LOGIC TO ONLY RECEIVE A UINT256\\n            if (winningSymbol == Symbol.Heads) {\\n                headWins++;\\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Heads);\\n            } else {\\n                tailsWins++;\\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Tails);\\n            }\\n            if (headWins > 3) {\\n                winningSymbol = Symbol.Heads;\\n                if (winningSymbol == creatorSymbol) {\\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\\n                } else {\\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\\n                }\\n                break;\\n            }\\n            if (tailsWins > 3) {\\n                winningSymbol = Symbol.Tails;\\n                if (winningSymbol == creatorSymbol) {\\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\\n                } else {\\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\\n                }\\n                break;\\n            }\\n        }\\n    }\\n\\n    //LOGIC COIN FLIP\\n    // if a randomnumber % 100 is more than 50 it is heads, if less then it is tails\\n    function gameLogic(uint256 randValue) public view returns (Symbol) {\\n        uint256 calc = randValue % 100;\\n        Symbol _symbol;\\n        if (calc > probability) {\\n            _symbol = Symbol.Heads;\\n        } else {\\n            _symbol = Symbol.Tails;\\n        }\\n        return _symbol;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    //VIEW FUNCTIONS\\n\\n    //TO GET THE BALANCE OF A PERSON\\n    function balanceOf(address _address) public view returns (uint256) {\\n        return balance[_address];\\n    }\\n\\n    //GET THE NUMBER OF GAMES OPEN BASED ON SPECIFIC AMOUNT A USER WANT TO PLAY WITH\\n    function allGamesBasedOnAmount(uint256 _amount) public view returns (uint256) {\\n        uint256 numberOfGames = 0;\\n        for (uint256 i; i < availableGames.length; i++) {\\n            if (availableGames[i]._amount == _amount) {\\n                numberOfGames++;\\n            }\\n        }\\n        return numberOfGames;\\n    }\\n\\n    //GET THE NUMBER OF AVAILABLE GAMES\\n    function allAvailableGames() public view returns (uint256) {\\n        return availableGames.length;\\n    }\\n\\n    //GET THE NUMBER OF GAMES IN PROGRESS\\n    function allGamesInProgress() public view returns (uint256) {\\n        return gamesInProgress.length;\\n    }\\n\\n    //GET THE NUMBER OF FINISHED GAMES\\n    function allFinishedGames() public view returns (uint256) {\\n        return finishedGames.length;\\n    }\\n\\n    //CHECK WINNER OF THE GAME\\n    function viewWinner(uint256 _gameId) public view returns (address) {\\n        address viewWinnerAddress;\\n        for (uint256 i; i < finishedGames.length; i++) {\\n            if (finishedGames[i]._gameId == _gameId) {\\n                viewWinnerAddress = finishedGames[i]._winner;\\n            }\\n        }\\n        return viewWinnerAddress;\\n    }\\n\\n    //GET GAME NUMBER\\n    function viewGameNumber() public view returns (uint256) {\\n        return gameId;\\n    }\\n\\n    //GET GAME FEE\\n    function getGameFee() public view returns (uint256) {\\n        return gameFee;\\n    }\\n\\n    //TO GET THE RANDOM VALUES - TO TEST THE RANDOMNESS AND GAMELOGIC\\n    uint256 lastRequestId;\\n\\n    function getGameIdRandomValues() public view returns (uint256[] memory) {\\n        return wordRequests[lastRequestId].randomValues;\\n    }\\n}\\n\",\"keccak256\":\"0x121cd579886e59692c9b56de62e4f6e2ead692f83baf84b5832ed7a4217d6b68\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600361ffff166101009061ffff16815250600763ffffffff166101209063ffffffff16815250603260045567016345785d8a00006006553480156200004957600080fd5b50604051620044193803806200441983398181016040528101906200006f919062000540565b33806000888073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200011c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000113906200063d565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001a357620001a281620002aa60201b60201c565b5b50505085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff16815250508461014081815250508367ffffffffffffffff1660a08167ffffffffffffffff16815250508260c081815250508163ffffffff1660e08163ffffffff168152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050620006d1565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200031c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031390620006af565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040c82620003df565b9050919050565b6200041e81620003ff565b81146200042a57600080fd5b50565b6000815190506200043e8162000413565b92915050565b6000819050919050565b620004598162000444565b81146200046557600080fd5b50565b60008151905062000479816200044e565b92915050565b600067ffffffffffffffff82169050919050565b6200049e816200047f565b8114620004aa57600080fd5b50565b600081519050620004be8162000493565b92915050565b6000819050919050565b620004d981620004c4565b8114620004e557600080fd5b50565b600081519050620004f981620004ce565b92915050565b600063ffffffff82169050919050565b6200051a81620004ff565b81146200052657600080fd5b50565b6000815190506200053a816200050f565b92915050565b60008060008060008060c0878903121562000560576200055f620003da565b5b60006200057089828a016200042d565b96505060206200058389828a0162000468565b95505060406200059689828a01620004ad565b9450506060620005a989828a01620004e8565b9350506080620005bc89828a0162000529565b92505060a0620005cf89828a016200042d565b9150509295509295509295565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b600062000625601883620005dc565b91506200063282620005ed565b602082019050919050565b60006020820190508181036000830152620006588162000616565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600062000697601783620005dc565b9150620006a4826200065f565b602082019050919050565b60006020820190508181036000830152620006ca8162000688565b9050919050565b60805160a05160c05160e05161010051610120516101405161016051613cb16200076860003960008181610c4f0152818161129101528181611a2201526128c0015260008181610a0e015281816115e0015261288f0152600081816120490152612431015260006123ef01526000612410015260006123ad015260006123ce0152600081816107c7015261081b0152613cb16000f3fe6080604052600436106101c25760003560e01c80639966cc83116100f7578063d7c81b5511610095578063efaa55a011610064578063efaa55a014610636578063f2fde38b1461065f578063f488991c14610688578063fec19e92146106c5576101c2565b8063d7c81b5514610562578063e2a9b85d1461058d578063e3d670d7146105ce578063ea777eec1461060b576101c2565b8063c4f7cac2116100d1578063c4f7cac2146104d7578063ca372f3814610502578063d0e30db01461052d578063d209daed14610537576101c2565b80639966cc8314610431578063bdb1175314610471578063c394f68b1461049a576101c2565b80636061b22b1161016457806379ba50971161013e57806379ba5097146103995780638da5cb5b146103b05780639619367d146103db578063970d630914610406576101c2565b80636061b22b146102f557806369958ab91461033357806370a082311461035c576101c2565b80631fe543e3116101a05780631fe543e31461025a5780632e1a7d4d14610283578063481456f91461029f5780635bba88f1146102ca576101c2565b806304cd21f6146101c75780630e9b7aab146101f25780631f197a731461021d575b600080fd5b3480156101d357600080fd5b506101dc610705565b6040516101e99190612fdb565b60405180910390f35b3480156101fe57600080fd5b50610207610712565b6040516102149190612fdb565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190613036565b61071f565b60405161025191906130a4565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190613218565b6107c5565b005b61029d60048036038101906102989190613036565b610885565b005b3480156102ab57600080fd5b506102b4610a04565b6040516102c19190612fdb565b60405180910390f35b3480156102d657600080fd5b506102df610a0a565b6040516102ec9190612fdb565b60405180910390f35b34801561030157600080fd5b5061031c60048036038101906103179190613036565b610a32565b60405161032a92919061328f565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190613036565b610a63565b005b34801561036857600080fd5b50610383600480360381019061037e91906132e4565b610e18565b6040516103909190612fdb565b60405180910390f35b3480156103a557600080fd5b506103ae610e61565b005b3480156103bc57600080fd5b506103c5610ff6565b6040516103d291906130a4565b60405180910390f35b3480156103e757600080fd5b506103f061101f565b6040516103fd9190612fdb565b60405180910390f35b34801561041257600080fd5b5061041b611025565b60405161042891906133cf565b60405180910390f35b34801561043d57600080fd5b5061045860048036038101906104539190613036565b611093565b6040516104689493929190613468565b60405180910390f35b34801561047d57600080fd5b50610498600480360381019061049391906134d2565b611100565b005b3480156104a657600080fd5b506104c160048036038101906104bc9190613036565b611428565b6040516104ce9190612fdb565b60405180910390f35b3480156104e357600080fd5b506104ec611498565b6040516104f99190612fdb565b60405180910390f35b34801561050e57600080fd5b506105176114a5565b6040516105249190612fdb565b60405180910390f35b6105356114af565b005b34801561054357600080fd5b5061054c611507565b6040516105599190613571565b60405180910390f35b34801561056e57600080fd5b5061057761152d565b6040516105849190612fdb565b60405180910390f35b34801561059957600080fd5b506105b460048036038101906105af9190613036565b611533565b6040516105c595949392919061358c565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906132e4565b6115c6565b6040516106029190612fdb565b60405180910390f35b34801561061757600080fd5b506106206115de565b60405161062d9190612fdb565b60405180910390f35b34801561064257600080fd5b5061065d60048036038101906106589190613036565b611602565b005b34801561066b57600080fd5b50610686600480360381019061068191906132e4565b611db2565b005b34801561069457600080fd5b506106af60048036038101906106aa9190613036565b611dc6565b6040516106bc91906135df565b60405180910390f35b3480156106d157600080fd5b506106ec60048036038101906106e79190613036565b611dfc565b6040516106fc94939291906135fa565b60405180910390f35b6000600880549050905090565b6000600780549050905090565b60008060005b6009805490508110156107bb5783600982815481106107475761074661363f565b5b90600052602060002090600402016000015414156107a857600981815481106107735761077261363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b80806107b39061369d565b915050610725565b5080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161086e9291906136e6565b60405180910390fd5b6108818282611e7c565b5050565b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108fe576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461094d919061370f565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161097a90613774565b60006040518083038185875af1925050503d80600081146109b7576040519150601f19603f3d011682016040523d82523d6000602084013e6109bc565b606091505b5050905080610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f7906137e6565b60405180910390fd5b5050565b60045481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ac091906130a4565b602060405180830381865afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b01919061381b565b1415610b39576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600780549050811015610e14578160078281548110610b5e57610b5d61363f565b5b9060005260206000209060040201600001541415610e01573373ffffffffffffffffffffffffffffffffffffffff1660078281548110610ba157610ba061363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c20576040517fff408ef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060078281548110610c3657610c3561363f565b5b9060005260206000209060040201600201549050610c757f000000000000000000000000000000000000000000000000000000000000000033836122ba565b60076001600780549050610c89919061370f565b81548110610c9a57610c9961363f565b5b906000526020600020906004020160078381548110610cbc57610cbb61363f565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff02191690836001811115610d7d57610d7c6133f1565b5b02179055509050506007805480610d9757610d96613848565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff02191690555050905550610e14565b8080610e0c9061369d565b915050610b3c565b5050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee8906138c3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b6060600b6000600c54815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561108957602002820191906000526020600020905b815481526020019060010190808311611075575b5050505050905090565b600781815481106110a357600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161115d91906130a4565b602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e919061381b565b14156111d6576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654821015611212576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561128b576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b6337f0000000000000000000000000000000000000000000000000000000000000000846122ba565b6007604051806080016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836001811115611300576112ff6133f1565b5b81525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff021916908360018111156113b2576113b16133f1565b5b021790555050503373ffffffffffffffffffffffffffffffffffffffff166005547fc450c2de8623c81fdc070b3541019888748bfea98249677eb443c6fbe8803a7484846040516114049291906138e3565b60405180910390a36005600081548092919061141f9061369d565b91905055505050565b6000806000905060005b60078054905081101561148e5783600782815481106114545761145361363f565b5b906000526020600020906004020160020154141561147b5781806114779061369d565b9250505b80806114869061369d565b915050611432565b5080915050919050565b6000600980549050905090565b6000600554905090565b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fe919061390c565b92505081905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6008818154811061154357600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b600a6020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161165f91906130a4565b602060405180830381865afa15801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a0919061381b565b14156116d8576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654811015611714576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561178d576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600780549050811015611da35782600782815481106117b7576117b661363f565b5b9060005260206000209060040201600201541415611cfb5760086040518060a00160405280600784815481106117f0576117ef61363f565b5b90600052602060002090600402016000015481526020016007848154811061181b5761181a61363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600784815481106118985761189761363f565b5b9060005260206000209060040201600201548152602001600784815481106118c3576118c261363f565b5b906000526020600020906004020160030160009054906101000a900460ff1660018111156118f4576118f36133f1565b5b81525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908360018111156119ed576119ec6133f1565b5b0217905550505060078181548110611a0857611a0761363f565b5b9060005260206000209060040201600001549150611a47337f0000000000000000000000000000000000000000000000000000000000000000856122ba565b3373ffffffffffffffffffffffffffffffffffffffff1660078281548110611a7257611a7161363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660078381548110611ace57611acd61363f565b5b9060005260206000209060040201600001547f48911a0c3f3655509de63455f3654f0b35f9b7ce5f52e58909ace726144875c860078581548110611b1557611b1461363f565b5b90600052602060002090600402016002015460078681548110611b3b57611b3a61363f565b5b906000526020600020906004020160030160009054906101000a900460ff16604051611b689291906138e3565b60405180910390a460076001600780549050611b84919061370f565b81548110611b9557611b9461363f565b5b906000526020600020906004020160078281548110611bb757611bb661363f565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff02191690836001811115611c7857611c776133f1565b5b02179055509050506007805480611c9257611c91613848565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff021916905550509055611da3565b60076001600780549050611d0f919061370f565b81548110611d2057611d1f61363f565b5b90600052602060002090600402016000015460078281548110611d4657611d4561363f565b5b9060005260206000209060040201600001541415611d90576040517f6b651f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080611d9b9061369d565b915050611795565b50611dad8161236b565b505050565b611dba6125b2565b611dc381612642565b50565b600080606483611dd69190613991565b90506000600454821115611ded5760009050611df2565b600190505b8092505050919050565b60098181548110611e0c57600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b6001600b600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555080600b60008481526020019081526020016000206002019080519060200190611ed5929190612f58565b5060008060008060005b60088054905081101561204057600b60008881526020019081526020016000206000015460088281548110611f1757611f1661363f565b5b906000526020600020906005020160000154141561202d5760088181548110611f4357611f4261363f565b5b906000526020600020906005020160040160009054906101000a900460ff16945060088181548110611f7857611f7761363f565b5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935060088181548110611fc057611fbf61363f565b5b906000526020600020906005020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060026008828154811061200a5761200961363f565b5b90600052602060002090600502016003015461202691906139c2565b9150612040565b80806120389061369d565b915050611edf565b5060008060005b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168110156122af57600061209a89838151811061208d5761208c61363f565b5b6020026020010151611dc6565b9050600060018111156120b0576120af6133f1565b5b8160018111156120c3576120c26133f1565b5b141561212b5783806120d49061369d565b945050600b60008b8152602001908152602001600020600001547f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600060405161211e91906135df565b60405180910390a2612189565b82806121369061369d565b935050600b60008b8152602001908152602001600020600001547f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600160405161218091906135df565b60405180910390a25b600384111561221257600090508760018111156121a9576121a86133f1565b5b8160018111156121bc576121bb6133f1565b5b14156121e9576121e4600b60008c81526020019081526020016000206000015488888861276f565b61220c565b61220b600b60008c81526020019081526020016000206000015487898861276f565b5b506122af565b600383111561229b5760019050876001811115612232576122316133f1565b5b816001811115612245576122446133f1565b5b14156122725761226d600b60008c81526020019081526020016000206000015488888861276f565b612295565b612294600b60008c81526020019081526020016000206000015487898861276f565b5b506122af565b5080806122a79061369d565b915050612047565b505050505050505050565b80600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612309919061370f565b9250508190555080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461235f919061390c565b92505081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401612470959493929190613a94565b6020604051808303816000875af115801561248f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b3919061381b565b90506040518060600160405280838152602001600015158152602001600067ffffffffffffffff8111156124ea576124e96130d5565b5b6040519080825280602002602001820160405280156125185781602001602082028036833780820191505090505b50815250600b60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002019080519060200190612575929190612f58565b50905050807fb67476d1d38e93caac2ca37113122e613c199269c4cea0d39c67807a6442b40a60405160405180910390a280600c81905550919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263790613b33565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a890613b9f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600960405180608001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155505060007f0000000000000000000000000000000000000000000000000000000000000000826128b9919061370f565b90506128e67f000000000000000000000000000000000000000000000000000000000000000085836122ba565b60005b600880549050811015612b4f57856008828154811061290b5761290a61363f565b5b9060005260206000209060050201600001541415612b3c5760086001600880549050612937919061370f565b815481106129485761294761363f565b5b90600052602060002090600502016008828154811061296a5761296961363f565b5b9060005260206000209060050201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690836001811115612a9257612a916133f1565b5b02179055509050506008805480612aac57612aab613848565b5b60019003818190600052602060002090600502016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549060ff021916905550509055612b4f565b8080612b479061369d565b9150506128e9565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867f3c40e3fa45e773a9814996991ed01608da066c59f6a5630c214b1e1151836f4b85604051612bae9190612fdb565b60405180910390a46000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637edd632d866040518263ffffffff1660e01b8152600401612c1391906130a4565b602060405180830381865afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c54919061381b565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637edd632d866040518263ffffffff1660e01b8152600401612cb391906130a4565b602060405180830381865afa158015612cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf4919061381b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631003c1b5836040518263ffffffff1660e01b8152600401612d519190612fdb565b600060405180830381600087803b158015612d6b57600080fd5b505af1158015612d7f573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a11da1e826040518263ffffffff1660e01b8152600401612dde9190612fdb565b600060405180830381600087803b158015612df857600080fd5b505af1158015612e0c573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd10e5183600287612e5c9190613bbf565b6040518363ffffffff1660e01b8152600401612e79929190613c09565b600060405180830381600087803b158015612e9357600080fd5b505af1158015612ea7573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd10e5182600287612ef79190613bbf565b612f0090613c32565b6040518363ffffffff1660e01b8152600401612f1d929190613c09565b600060405180830381600087803b158015612f3757600080fd5b505af1158015612f4b573d6000803e3d6000fd5b5050505050505050505050565b828054828255906000526020600020908101928215612f94579160200282015b82811115612f93578251825591602001919060010190612f78565b5b509050612fa19190612fa5565b5090565b5b80821115612fbe576000816000905550600101612fa6565b5090565b6000819050919050565b612fd581612fc2565b82525050565b6000602082019050612ff06000830184612fcc565b92915050565b6000604051905090565b600080fd5b600080fd5b61301381612fc2565b811461301e57600080fd5b50565b6000813590506130308161300a565b92915050565b60006020828403121561304c5761304b613000565b5b600061305a84828501613021565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061308e82613063565b9050919050565b61309e81613083565b82525050565b60006020820190506130b96000830184613095565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61310d826130c4565b810181811067ffffffffffffffff8211171561312c5761312b6130d5565b5b80604052505050565b600061313f612ff6565b905061314b8282613104565b919050565b600067ffffffffffffffff82111561316b5761316a6130d5565b5b602082029050602081019050919050565b600080fd5b600061319461318f84613150565b613135565b905080838252602082019050602084028301858111156131b7576131b661317c565b5b835b818110156131e057806131cc8882613021565b8452602084019350506020810190506131b9565b5050509392505050565b600082601f8301126131ff576131fe6130bf565b5b813561320f848260208601613181565b91505092915050565b6000806040838503121561322f5761322e613000565b5b600061323d85828601613021565b925050602083013567ffffffffffffffff81111561325e5761325d613005565b5b61326a858286016131ea565b9150509250929050565b60008115159050919050565b61328981613274565b82525050565b60006040820190506132a46000830185612fcc565b6132b16020830184613280565b9392505050565b6132c181613083565b81146132cc57600080fd5b50565b6000813590506132de816132b8565b92915050565b6000602082840312156132fa576132f9613000565b5b6000613308848285016132cf565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61334681612fc2565b82525050565b6000613358838361333d565b60208301905092915050565b6000602082019050919050565b600061337c82613311565b613386818561331c565b93506133918361332d565b8060005b838110156133c25781516133a9888261334c565b97506133b483613364565b925050600181019050613395565b5085935050505092915050565b600060208201905081810360008301526133e98184613371565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613431576134306133f1565b5b50565b600081905061344282613420565b919050565b600061345282613434565b9050919050565b61346281613447565b82525050565b600060808201905061347d6000830187612fcc565b61348a6020830186613095565b6134976040830185612fcc565b6134a46060830184613459565b95945050505050565b600281106134ba57600080fd5b50565b6000813590506134cc816134ad565b92915050565b600080604083850312156134e9576134e8613000565b5b60006134f785828601613021565b9250506020613508858286016134bd565b9150509250929050565b6000819050919050565b600061353761353261352d84613063565b613512565b613063565b9050919050565b60006135498261351c565b9050919050565b600061355b8261353e565b9050919050565b61356b81613550565b82525050565b60006020820190506135866000830184613562565b92915050565b600060a0820190506135a16000830188612fcc565b6135ae6020830187613095565b6135bb6040830186613095565b6135c86060830185612fcc565b6135d56080830184613459565b9695505050505050565b60006020820190506135f46000830184613459565b92915050565b600060808201905061360f6000830187612fcc565b61361c6020830186613095565b6136296040830185613095565b6136366060830184612fcc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136a882612fc2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136db576136da61366e565b5b600182019050919050565b60006040820190506136fb6000830185613095565b6137086020830184613095565b9392505050565b600061371a82612fc2565b915061372583612fc2565b9250828210156137385761373761366e565b5b828203905092915050565b600081905092915050565b50565b600061375e600083613743565b91506137698261374e565b600082019050919050565b600061377f82613751565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b60006137d0600b83613789565b91506137db8261379a565b602082019050919050565b600060208201905081810360008301526137ff816137c3565b9050919050565b6000815190506138158161300a565b92915050565b60006020828403121561383157613830613000565b5b600061383f84828501613806565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006138ad601683613789565b91506138b882613877565b602082019050919050565b600060208201905081810360008301526138dc816138a0565b9050919050565b60006040820190506138f86000830185612fcc565b6139056020830184613459565b9392505050565b600061391782612fc2565b915061392283612fc2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139575761395661366e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061399c82612fc2565b91506139a783612fc2565b9250826139b7576139b6613962565b5b828206905092915050565b60006139cd82612fc2565b91506139d883612fc2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a1157613a1061366e565b5b828202905092915050565b6000819050919050565b613a2f81613a1c565b82525050565b600067ffffffffffffffff82169050919050565b613a5281613a35565b82525050565b600061ffff82169050919050565b613a6f81613a58565b82525050565b600063ffffffff82169050919050565b613a8e81613a75565b82525050565b600060a082019050613aa96000830188613a26565b613ab66020830187613a49565b613ac36040830186613a66565b613ad06060830185613a85565b613add6080830184613a85565b9695505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000613b1d601683613789565b9150613b2882613ae7565b602082019050919050565b60006020820190508181036000830152613b4c81613b10565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000613b89601783613789565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b6000613bca82612fc2565b9150613bd583612fc2565b925082613be557613be4613962565b5b828204905092915050565b6000819050919050565b613c0381613bf0565b82525050565b6000604082019050613c1e6000830185612fcc565b613c2b6020830184613bfa565b9392505050565b6000613c3d82613bf0565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613c7057613c6f61366e565b5b81600003905091905056fea264697066735822122042f0f8012441235212099884a660bbd961fc86d3c86196be48e3f19c955b396464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80639966cc83116100f7578063d7c81b5511610095578063efaa55a011610064578063efaa55a014610636578063f2fde38b1461065f578063f488991c14610688578063fec19e92146106c5576101c2565b8063d7c81b5514610562578063e2a9b85d1461058d578063e3d670d7146105ce578063ea777eec1461060b576101c2565b8063c4f7cac2116100d1578063c4f7cac2146104d7578063ca372f3814610502578063d0e30db01461052d578063d209daed14610537576101c2565b80639966cc8314610431578063bdb1175314610471578063c394f68b1461049a576101c2565b80636061b22b1161016457806379ba50971161013e57806379ba5097146103995780638da5cb5b146103b05780639619367d146103db578063970d630914610406576101c2565b80636061b22b146102f557806369958ab91461033357806370a082311461035c576101c2565b80631fe543e3116101a05780631fe543e31461025a5780632e1a7d4d14610283578063481456f91461029f5780635bba88f1146102ca576101c2565b806304cd21f6146101c75780630e9b7aab146101f25780631f197a731461021d575b600080fd5b3480156101d357600080fd5b506101dc610705565b6040516101e99190612fdb565b60405180910390f35b3480156101fe57600080fd5b50610207610712565b6040516102149190612fdb565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190613036565b61071f565b60405161025191906130a4565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190613218565b6107c5565b005b61029d60048036038101906102989190613036565b610885565b005b3480156102ab57600080fd5b506102b4610a04565b6040516102c19190612fdb565b60405180910390f35b3480156102d657600080fd5b506102df610a0a565b6040516102ec9190612fdb565b60405180910390f35b34801561030157600080fd5b5061031c60048036038101906103179190613036565b610a32565b60405161032a92919061328f565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190613036565b610a63565b005b34801561036857600080fd5b50610383600480360381019061037e91906132e4565b610e18565b6040516103909190612fdb565b60405180910390f35b3480156103a557600080fd5b506103ae610e61565b005b3480156103bc57600080fd5b506103c5610ff6565b6040516103d291906130a4565b60405180910390f35b3480156103e757600080fd5b506103f061101f565b6040516103fd9190612fdb565b60405180910390f35b34801561041257600080fd5b5061041b611025565b60405161042891906133cf565b60405180910390f35b34801561043d57600080fd5b5061045860048036038101906104539190613036565b611093565b6040516104689493929190613468565b60405180910390f35b34801561047d57600080fd5b50610498600480360381019061049391906134d2565b611100565b005b3480156104a657600080fd5b506104c160048036038101906104bc9190613036565b611428565b6040516104ce9190612fdb565b60405180910390f35b3480156104e357600080fd5b506104ec611498565b6040516104f99190612fdb565b60405180910390f35b34801561050e57600080fd5b506105176114a5565b6040516105249190612fdb565b60405180910390f35b6105356114af565b005b34801561054357600080fd5b5061054c611507565b6040516105599190613571565b60405180910390f35b34801561056e57600080fd5b5061057761152d565b6040516105849190612fdb565b60405180910390f35b34801561059957600080fd5b506105b460048036038101906105af9190613036565b611533565b6040516105c595949392919061358c565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906132e4565b6115c6565b6040516106029190612fdb565b60405180910390f35b34801561061757600080fd5b506106206115de565b60405161062d9190612fdb565b60405180910390f35b34801561064257600080fd5b5061065d60048036038101906106589190613036565b611602565b005b34801561066b57600080fd5b50610686600480360381019061068191906132e4565b611db2565b005b34801561069457600080fd5b506106af60048036038101906106aa9190613036565b611dc6565b6040516106bc91906135df565b60405180910390f35b3480156106d157600080fd5b506106ec60048036038101906106e79190613036565b611dfc565b6040516106fc94939291906135fa565b60405180910390f35b6000600880549050905090565b6000600780549050905090565b60008060005b6009805490508110156107bb5783600982815481106107475761074661363f565b5b90600052602060002090600402016000015414156107a857600981815481106107735761077261363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b80806107b39061369d565b915050610725565b5080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161086e9291906136e6565b60405180910390fd5b6108818282611e7c565b5050565b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108fe576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461094d919061370f565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161097a90613774565b60006040518083038185875af1925050503d80600081146109b7576040519150601f19603f3d011682016040523d82523d6000602084013e6109bc565b606091505b5050905080610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f7906137e6565b60405180910390fd5b5050565b60045481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ac091906130a4565b602060405180830381865afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b01919061381b565b1415610b39576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600780549050811015610e14578160078281548110610b5e57610b5d61363f565b5b9060005260206000209060040201600001541415610e01573373ffffffffffffffffffffffffffffffffffffffff1660078281548110610ba157610ba061363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c20576040517fff408ef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060078281548110610c3657610c3561363f565b5b9060005260206000209060040201600201549050610c757f000000000000000000000000000000000000000000000000000000000000000033836122ba565b60076001600780549050610c89919061370f565b81548110610c9a57610c9961363f565b5b906000526020600020906004020160078381548110610cbc57610cbb61363f565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff02191690836001811115610d7d57610d7c6133f1565b5b02179055509050506007805480610d9757610d96613848565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff02191690555050905550610e14565b8080610e0c9061369d565b915050610b3c565b5050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee8906138c3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b6060600b6000600c54815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561108957602002820191906000526020600020905b815481526020019060010190808311611075575b5050505050905090565b600781815481106110a357600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161115d91906130a4565b602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e919061381b565b14156111d6576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654821015611212576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561128b576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b6337f0000000000000000000000000000000000000000000000000000000000000000846122ba565b6007604051806080016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836001811115611300576112ff6133f1565b5b81525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff021916908360018111156113b2576113b16133f1565b5b021790555050503373ffffffffffffffffffffffffffffffffffffffff166005547fc450c2de8623c81fdc070b3541019888748bfea98249677eb443c6fbe8803a7484846040516114049291906138e3565b60405180910390a36005600081548092919061141f9061369d565b91905055505050565b6000806000905060005b60078054905081101561148e5783600782815481106114545761145361363f565b5b906000526020600020906004020160020154141561147b5781806114779061369d565b9250505b80806114869061369d565b915050611432565b5080915050919050565b6000600980549050905090565b6000600554905090565b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fe919061390c565b92505081905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6008818154811061154357600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b600a6020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161165f91906130a4565b602060405180830381865afa15801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a0919061381b565b14156116d8576040517fd98c2d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654811015611714576040517fda5871da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561178d576040517f1c65903100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600780549050811015611da35782600782815481106117b7576117b661363f565b5b9060005260206000209060040201600201541415611cfb5760086040518060a00160405280600784815481106117f0576117ef61363f565b5b90600052602060002090600402016000015481526020016007848154811061181b5761181a61363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600784815481106118985761189761363f565b5b9060005260206000209060040201600201548152602001600784815481106118c3576118c261363f565b5b906000526020600020906004020160030160009054906101000a900460ff1660018111156118f4576118f36133f1565b5b81525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908360018111156119ed576119ec6133f1565b5b0217905550505060078181548110611a0857611a0761363f565b5b9060005260206000209060040201600001549150611a47337f0000000000000000000000000000000000000000000000000000000000000000856122ba565b3373ffffffffffffffffffffffffffffffffffffffff1660078281548110611a7257611a7161363f565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660078381548110611ace57611acd61363f565b5b9060005260206000209060040201600001547f48911a0c3f3655509de63455f3654f0b35f9b7ce5f52e58909ace726144875c860078581548110611b1557611b1461363f565b5b90600052602060002090600402016002015460078681548110611b3b57611b3a61363f565b5b906000526020600020906004020160030160009054906101000a900460ff16604051611b689291906138e3565b60405180910390a460076001600780549050611b84919061370f565b81548110611b9557611b9461363f565b5b906000526020600020906004020160078281548110611bb757611bb661363f565b5b9060005260206000209060040201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff02191690836001811115611c7857611c776133f1565b5b02179055509050506007805480611c9257611c91613848565b5b60019003818190600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff021916905550509055611da3565b60076001600780549050611d0f919061370f565b81548110611d2057611d1f61363f565b5b90600052602060002090600402016000015460078281548110611d4657611d4561363f565b5b9060005260206000209060040201600001541415611d90576040517f6b651f8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080611d9b9061369d565b915050611795565b50611dad8161236b565b505050565b611dba6125b2565b611dc381612642565b50565b600080606483611dd69190613991565b90506000600454821115611ded5760009050611df2565b600190505b8092505050919050565b60098181548110611e0c57600080fd5b90600052602060002090600402016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b6001600b600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555080600b60008481526020019081526020016000206002019080519060200190611ed5929190612f58565b5060008060008060005b60088054905081101561204057600b60008881526020019081526020016000206000015460088281548110611f1757611f1661363f565b5b906000526020600020906005020160000154141561202d5760088181548110611f4357611f4261363f565b5b906000526020600020906005020160040160009054906101000a900460ff16945060088181548110611f7857611f7761363f565b5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935060088181548110611fc057611fbf61363f565b5b906000526020600020906005020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060026008828154811061200a5761200961363f565b5b90600052602060002090600502016003015461202691906139c2565b9150612040565b80806120389061369d565b915050611edf565b5060008060005b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168110156122af57600061209a89838151811061208d5761208c61363f565b5b6020026020010151611dc6565b9050600060018111156120b0576120af6133f1565b5b8160018111156120c3576120c26133f1565b5b141561212b5783806120d49061369d565b945050600b60008b8152602001908152602001600020600001547f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600060405161211e91906135df565b60405180910390a2612189565b82806121369061369d565b935050600b60008b8152602001908152602001600020600001547f14cb84a5ba040c3c553afe459f31184bf92f9658aa180e5ad749c6853df70b4b600160405161218091906135df565b60405180910390a25b600384111561221257600090508760018111156121a9576121a86133f1565b5b8160018111156121bc576121bb6133f1565b5b14156121e9576121e4600b60008c81526020019081526020016000206000015488888861276f565b61220c565b61220b600b60008c81526020019081526020016000206000015487898861276f565b5b506122af565b600383111561229b5760019050876001811115612232576122316133f1565b5b816001811115612245576122446133f1565b5b14156122725761226d600b60008c81526020019081526020016000206000015488888861276f565b612295565b612294600b60008c81526020019081526020016000206000015487898861276f565b5b506122af565b5080806122a79061369d565b915050612047565b505050505050505050565b80600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612309919061370f565b9250508190555080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461235f919061390c565b92505081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401612470959493929190613a94565b6020604051808303816000875af115801561248f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b3919061381b565b90506040518060600160405280838152602001600015158152602001600067ffffffffffffffff8111156124ea576124e96130d5565b5b6040519080825280602002602001820160405280156125185781602001602082028036833780820191505090505b50815250600b60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055506040820151816002019080519060200190612575929190612f58565b50905050807fb67476d1d38e93caac2ca37113122e613c199269c4cea0d39c67807a6442b40a60405160405180910390a280600c81905550919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263790613b33565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a890613b9f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600960405180608001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155505060007f0000000000000000000000000000000000000000000000000000000000000000826128b9919061370f565b90506128e67f000000000000000000000000000000000000000000000000000000000000000085836122ba565b60005b600880549050811015612b4f57856008828154811061290b5761290a61363f565b5b9060005260206000209060050201600001541415612b3c5760086001600880549050612937919061370f565b815481106129485761294761363f565b5b90600052602060002090600502016008828154811061296a5761296961363f565b5b9060005260206000209060050201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690836001811115612a9257612a916133f1565b5b02179055509050506008805480612aac57612aab613848565b5b60019003818190600052602060002090600502016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549060ff021916905550509055612b4f565b8080612b479061369d565b9150506128e9565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16867f3c40e3fa45e773a9814996991ed01608da066c59f6a5630c214b1e1151836f4b85604051612bae9190612fdb565b60405180910390a46000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637edd632d866040518263ffffffff1660e01b8152600401612c1391906130a4565b602060405180830381865afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c54919061381b565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637edd632d866040518263ffffffff1660e01b8152600401612cb391906130a4565b602060405180830381865afa158015612cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf4919061381b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631003c1b5836040518263ffffffff1660e01b8152600401612d519190612fdb565b600060405180830381600087803b158015612d6b57600080fd5b505af1158015612d7f573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a11da1e826040518263ffffffff1660e01b8152600401612dde9190612fdb565b600060405180830381600087803b158015612df857600080fd5b505af1158015612e0c573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd10e5183600287612e5c9190613bbf565b6040518363ffffffff1660e01b8152600401612e79929190613c09565b600060405180830381600087803b158015612e9357600080fd5b505af1158015612ea7573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd10e5182600287612ef79190613bbf565b612f0090613c32565b6040518363ffffffff1660e01b8152600401612f1d929190613c09565b600060405180830381600087803b158015612f3757600080fd5b505af1158015612f4b573d6000803e3d6000fd5b5050505050505050505050565b828054828255906000526020600020908101928215612f94579160200282015b82811115612f93578251825591602001919060010190612f78565b5b509050612fa19190612fa5565b5090565b5b80821115612fbe576000816000905550600101612fa6565b5090565b6000819050919050565b612fd581612fc2565b82525050565b6000602082019050612ff06000830184612fcc565b92915050565b6000604051905090565b600080fd5b600080fd5b61301381612fc2565b811461301e57600080fd5b50565b6000813590506130308161300a565b92915050565b60006020828403121561304c5761304b613000565b5b600061305a84828501613021565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061308e82613063565b9050919050565b61309e81613083565b82525050565b60006020820190506130b96000830184613095565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61310d826130c4565b810181811067ffffffffffffffff8211171561312c5761312b6130d5565b5b80604052505050565b600061313f612ff6565b905061314b8282613104565b919050565b600067ffffffffffffffff82111561316b5761316a6130d5565b5b602082029050602081019050919050565b600080fd5b600061319461318f84613150565b613135565b905080838252602082019050602084028301858111156131b7576131b661317c565b5b835b818110156131e057806131cc8882613021565b8452602084019350506020810190506131b9565b5050509392505050565b600082601f8301126131ff576131fe6130bf565b5b813561320f848260208601613181565b91505092915050565b6000806040838503121561322f5761322e613000565b5b600061323d85828601613021565b925050602083013567ffffffffffffffff81111561325e5761325d613005565b5b61326a858286016131ea565b9150509250929050565b60008115159050919050565b61328981613274565b82525050565b60006040820190506132a46000830185612fcc565b6132b16020830184613280565b9392505050565b6132c181613083565b81146132cc57600080fd5b50565b6000813590506132de816132b8565b92915050565b6000602082840312156132fa576132f9613000565b5b6000613308848285016132cf565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61334681612fc2565b82525050565b6000613358838361333d565b60208301905092915050565b6000602082019050919050565b600061337c82613311565b613386818561331c565b93506133918361332d565b8060005b838110156133c25781516133a9888261334c565b97506133b483613364565b925050600181019050613395565b5085935050505092915050565b600060208201905081810360008301526133e98184613371565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613431576134306133f1565b5b50565b600081905061344282613420565b919050565b600061345282613434565b9050919050565b61346281613447565b82525050565b600060808201905061347d6000830187612fcc565b61348a6020830186613095565b6134976040830185612fcc565b6134a46060830184613459565b95945050505050565b600281106134ba57600080fd5b50565b6000813590506134cc816134ad565b92915050565b600080604083850312156134e9576134e8613000565b5b60006134f785828601613021565b9250506020613508858286016134bd565b9150509250929050565b6000819050919050565b600061353761353261352d84613063565b613512565b613063565b9050919050565b60006135498261351c565b9050919050565b600061355b8261353e565b9050919050565b61356b81613550565b82525050565b60006020820190506135866000830184613562565b92915050565b600060a0820190506135a16000830188612fcc565b6135ae6020830187613095565b6135bb6040830186613095565b6135c86060830185612fcc565b6135d56080830184613459565b9695505050505050565b60006020820190506135f46000830184613459565b92915050565b600060808201905061360f6000830187612fcc565b61361c6020830186613095565b6136296040830185613095565b6136366060830184612fcc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136a882612fc2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136db576136da61366e565b5b600182019050919050565b60006040820190506136fb6000830185613095565b6137086020830184613095565b9392505050565b600061371a82612fc2565b915061372583612fc2565b9250828210156137385761373761366e565b5b828203905092915050565b600081905092915050565b50565b600061375e600083613743565b91506137698261374e565b600082019050919050565b600061377f82613751565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b60006137d0600b83613789565b91506137db8261379a565b602082019050919050565b600060208201905081810360008301526137ff816137c3565b9050919050565b6000815190506138158161300a565b92915050565b60006020828403121561383157613830613000565b5b600061383f84828501613806565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006138ad601683613789565b91506138b882613877565b602082019050919050565b600060208201905081810360008301526138dc816138a0565b9050919050565b60006040820190506138f86000830185612fcc565b6139056020830184613459565b9392505050565b600061391782612fc2565b915061392283612fc2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139575761395661366e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061399c82612fc2565b91506139a783612fc2565b9250826139b7576139b6613962565b5b828206905092915050565b60006139cd82612fc2565b91506139d883612fc2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a1157613a1061366e565b5b828202905092915050565b6000819050919050565b613a2f81613a1c565b82525050565b600067ffffffffffffffff82169050919050565b613a5281613a35565b82525050565b600061ffff82169050919050565b613a6f81613a58565b82525050565b600063ffffffff82169050919050565b613a8e81613a75565b82525050565b600060a082019050613aa96000830188613a26565b613ab66020830187613a49565b613ac36040830186613a66565b613ad06060830185613a85565b613add6080830184613a85565b9695505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000613b1d601683613789565b9150613b2882613ae7565b602082019050919050565b60006020820190508181036000830152613b4c81613b10565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000613b89601783613789565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b6000613bca82612fc2565b9150613bd583612fc2565b925082613be557613be4613962565b5b828204905092915050565b6000819050919050565b613c0381613bf0565b82525050565b6000604082019050613c1e6000830185612fcc565b613c2b6020830184613bfa565b9392505050565b6000613c3d82613bf0565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613c7057613c6f61366e565b5b81600003905091905056fea264697066735822122042f0f8012441235212099884a660bbd961fc86d3c86196be48e3f19c955b396464736f6c634300080a0033",
  "devdoc": {
    "author": "Jaka Potokar",
    "details": "This implements the Chainlink VRF Version 2 MY NOTICE: CORRECT THE TRANSFER FUNCTION BECAUSE IT CAN GET HACKED, BECAUSE CALLER DOESN'T NEED TO BE REQUIRED",
    "kind": "dev",
    "methods": {},
    "title": "A Coin Flip mini game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "This contract make a coin flip mini game platform",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4722,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(VRFCoordinatorV2Interface)446"
      },
      {
        "astId": 4735,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "gamecoins",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GameCoins)4642"
      },
      {
        "astId": 4813,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "probability",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4817,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "gameId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4822,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "minBet",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4857,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "availableGames",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(availableGame)4832_storage)dyn_storage"
      },
      {
        "astId": 4861,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "gamesInProgress",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(gameInProgress)4844_storage)dyn_storage"
      },
      {
        "astId": 4865,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "finishedGames",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(finishedGame)4853_storage)dyn_storage"
      },
      {
        "astId": 4869,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "balance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5371,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "wordRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(subscriptionRequest)5366_storage)"
      },
      {
        "astId": 5808,
        "contract": "contracts/Gameplay.sol:Gameplay",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(availableGame)4832_storage)dyn_storage": {
        "base": "t_struct(availableGame)4832_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.availableGame[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(finishedGame)4853_storage)dyn_storage": {
        "base": "t_struct(finishedGame)4853_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.finishedGame[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(gameInProgress)4844_storage)dyn_storage": {
        "base": "t_struct(gameInProgress)4844_storage",
        "encoding": "dynamic_array",
        "label": "struct Gameplay.gameInProgress[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameCoins)4642": {
        "encoding": "inplace",
        "label": "contract GameCoins",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)446": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(Symbol)4810": {
        "encoding": "inplace",
        "label": "enum Gameplay.Symbol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(subscriptionRequest)5366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gameplay.subscriptionRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(subscriptionRequest)5366_storage"
      },
      "t_struct(availableGame)4832_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.availableGame",
        "members": [
          {
            "astId": 4824,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4826,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_challenger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4828,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4831,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Symbol)4810"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(finishedGame)4853_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.finishedGame",
        "members": [
          {
            "astId": 4846,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4848,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_winner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4850,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_loser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4852,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(gameInProgress)4844_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.gameInProgress",
        "members": [
          {
            "astId": 4834,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4836,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_challenger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4838,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_joiner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4840,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4843,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Symbol)4810"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(subscriptionRequest)5366_storage": {
        "encoding": "inplace",
        "label": "struct Gameplay.subscriptionRequest",
        "members": [
          {
            "astId": 5360,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5362,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "_fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 5365,
            "contract": "contracts/Gameplay.sol:Gameplay",
            "label": "randomValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}