{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Gameplay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Gameplay is VRFConsumerBaseV2, ConfirmedOwner {\n    //Each coin has its own struct which will enable to keep track of played matches, wins, losses and money won\n    //Each player will be able to put money in the contract to bet on the game\n    //Each player will then be rewarded with the money if they won\n    //The loser doesn't get anything\n\n    //NEED TO TRANSFER IN THE START TO MAKE SURE THEY DONT SPEND THE FUNDS IN THE MIDDLE OF THE MATCH(For now transfer to gameOwner). AT THE END THE TOKENS ARE TRANSFERED TO THE WINNER\n    //AT THE MOMENT THE TOKENS CAN BE SENT TO OWNER'S WALLET\n    //_TRANSFER TRANSACTION NEEDS TO BE AT THE START OF GAME, JOIN GAME, AND IN THE END\n\n    // IMPORTANT NOTES FOR NEXT SESSION -> NEED TO ADD SELECT SYMBOL TO CREATE A GAME(Get a feel being lucky), ADD GAME CALCULATION LOGIC TO JOIN A GAME\n    // QUESTION -> Do I want to use web and server to call function(so we have a delay from starting the game) and maybe a select heads or tails button to change the struct _symbol\n    // Or do I want to have everything on blockchain and add in function for delay, so everything isn't calculated at the start(or is this a better option)\n\n    //THE CREATOR OF THE GAMES GETS TO CHOOSE HIS/HERS SYMBOL AND AT THE END THE FUNCTION CALCULATES IF THE CREATOR HAS WON\n\n    using SafeMath for uint256;\n\n    //ERRORS\n    error CoinFlip_notEnoughFunds();\n    error CoinFlip_incorrectAddress();\n    error CoinFlip_betAmountTooLow();\n    error CoinFlip_noGameFoundWithThisAmount();\n\n    //EVENTS\n    event gameCreated(uint256 indexed _gameId, address _challenger, uint256 _amount);\n    event gameStarted(\n        uint256 indexed _gameId,\n        address _challenger,\n        address _joiner,\n        uint256 _amount\n    );\n    event gameFinished(uint256 indexed _gameId, address _winner, address _loser, uint256 _amount);\n    event amountTransfered(address indexed _sender, address _receiver, uint256 _amount);\n    event RequestedWinner(uint256 indexed requestId);\n    event coinFlipResult(uint256 _gameId, Symbol _winningSymbol);\n\n    // VRF COORDINATOR VARIABLES\n    uint64 private immutable s_subscriptionId;\n    VRFCoordinatorV2Interface COORDINATOR;\n    bytes32 private immutable s_keyHash;\n    uint32 private immutable s_callbackGasLimit;\n    uint16 private immutable requestConfirmations = 3;\n    uint32 private immutable numWords = 7;\n\n    //CONSTRUCTOR\n    //vrfCoordinator address for mumbai 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\n    //vrfCoordinator address for Matic mainnet 0xAE975071Be8F8eE67addBC1A82488F1C24858067\n    constructor(\n        address vrfCoordinatorAddress,\n        uint256 _gameFee,\n        uint64 subsriptionId,\n        bytes32 keyHash,\n        uint32 callbackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) ConfirmedOwner(msg.sender) {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\n        gameOwner = msg.sender;\n        gameFee = _gameFee;\n        s_subscriptionId = subsriptionId;\n        s_keyHash = keyHash;\n        s_callbackGasLimit = callbackGasLimit;\n    }\n\n    // COIN FLIP VARIABLES\n    //ENUM HEADS/TAILS\n    enum Symbol {\n        Heads,\n        Tails\n    }\n    uint256 public probability = 50;\n\n    //NEEDED PARAMETERS\n    uint256 public immutable gameFee;\n    uint256 public gameId;\n    address private immutable gameOwner;\n    uint256 public minBet = 100000000000000000; // MIN BET 0.1 MATIC\n\n    //GAME LOGIC\n    struct availableGame {\n        uint256 _gameId;\n        address _challenger;\n        uint256 _amount;\n        Symbol _symbol; // THE CREATOR GETS TO CHOOSE HIS/HERS SYMBOL HEADS/TAILS\n    }\n\n    struct gameInProgress {\n        uint256 _gameId;\n        address _challenger;\n        address _joiner;\n        uint256 _amount;\n        Symbol _symbol; // CREATOR CHOOSING OF THE SYMBOL\n    }\n\n    struct finishedGame {\n        uint256 _gameId;\n        address _winner;\n        address _loser;\n        uint256 _amount;\n    }\n\n    //GAME ARRAYS\n    availableGame[] public availableGames;\n    gameInProgress[] public gamesInProgress;\n    finishedGame[] public finishedGames;\n\n    //BALANCE OF USER\n    mapping(address => uint256) public balance;\n\n    //TRANSFER FUNCTIONALITY\n    function _transfer(address _sender, address _receiver, uint256 _amount) internal {\n        balance[_sender] -= _amount;\n        balance[_receiver] += _amount;\n    }\n\n    //DEPOSIT FUNCTION\n    function deposit() public payable {\n        balance[msg.sender] += msg.value;\n    }\n\n    //WITHDRAW FUNCTION\n    function withdraw(uint256 _amount) public payable {\n        if (balance[msg.sender] < _amount) {\n            revert CoinFlip_notEnoughFunds();\n        }\n        balance[msg.sender] -= _amount;\n        //WITHDRAW CALL\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amount}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    // TRYING TO IMPLEMENT SAFEMATH\n    //FUNCTION TO START THE GAME\n    function startGame(uint256 _amount, Symbol _symbol) public {\n        if (_amount < minBet) {\n            revert CoinFlip_betAmountTooLow();\n        }\n        if (balance[msg.sender] < _amount) {\n            revert CoinFlip_notEnoughFunds();\n        }\n        _transfer(msg.sender, gameOwner, _amount);\n        //balance[msg.sender] = SafeMath.sub(balance[msg.sender], _amount);\n        availableGames.push(availableGame(gameId, msg.sender, _amount, _symbol));\n        emit gameCreated(gameId, msg.sender, _amount);\n        gameId++;\n    }\n\n    //FUNCTION TO LET OWNER CANCEL THE MATCH IF NOBODY ENTERS\n    function cancelGame(uint256 _gameId) public {\n        for (uint256 i = 0; i < availableGames.length; i++) {\n            if (availableGames[i]._gameId == _gameId) {\n                if (availableGames[i]._challenger != msg.sender) {\n                    revert CoinFlip_incorrectAddress();\n                }\n                uint256 transferAmount = availableGames[i]._amount;\n                _transfer(gameOwner, msg.sender, transferAmount);\n                // delete availableGames[i];\n                availableGames[i] = availableGames[availableGames.length - 1];\n                availableGames.pop();\n                break;\n            }\n        }\n    }\n\n    //FUNCTION TO JOIN A GAME\n    function joinGame(uint256 _amount) public {\n        if (_amount < minBet) {\n            revert CoinFlip_betAmountTooLow();\n        }\n        if (balance[msg.sender] < _amount) {\n            revert CoinFlip_notEnoughFunds();\n        }\n        uint256 gamejoined;\n        for (uint256 i = 0; i < availableGames.length; i++) {\n            if (availableGames[i]._amount == _amount) {\n                gamesInProgress.push(\n                    gameInProgress(\n                        availableGames[i]._gameId,\n                        availableGames[i]._challenger,\n                        msg.sender,\n                        availableGames[i]._amount,\n                        availableGames[i]._symbol\n                    )\n                );\n                gamejoined = availableGames[i]._gameId;\n                _transfer(msg.sender, gameOwner, _amount);\n                emit gameStarted(\n                    availableGames[i]._gameId,\n                    availableGames[i]._challenger,\n                    msg.sender,\n                    availableGames[i]._amount\n                );\n                // delete availableGames[i];\n                availableGames[i] = availableGames[availableGames.length - 1];\n                availableGames.pop();\n                break;\n            } else {\n                if (\n                    availableGames[i]._gameId == availableGames[availableGames.length - 1]._gameId\n                ) {\n                    revert CoinFlip_noGameFoundWithThisAmount();\n                } // DO THIS TEST AS WELL, TRY IF WORKS\n            }\n        }\n        //HERE WE START THE GAME LOGIC WITH VRF GAMELOGIC AND ENDGAME, WE HAVE TO WAIT SOME TIME FOR RESULT TO GET BACK\n        requestRandomWords(gamejoined);\n    }\n\n    //FUNCTION WHICH IS CALLED AT THE END OF THE GAME TO TRANSFER TOKENS                   change to INTERNAL\n    function endGame(uint256 _gameId, address _winner, address _loser, uint256 _winnings) internal {\n        finishedGames.push(finishedGame(_gameId, _winner, _loser, _winnings));\n        uint256 playerWinnings = _winnings - gameFee;\n        _transfer(gameOwner, _winner, playerWinnings);\n        for (uint256 i = 0; i < gamesInProgress.length; i++) {\n            if (gamesInProgress[i]._gameId == _gameId) {\n                // delete gamesInProgress[i];\n                gamesInProgress[i] = gamesInProgress[gamesInProgress.length - 1];\n                gamesInProgress.pop();\n                break;\n            }\n        }\n        emit gameFinished(_gameId, _winner, _loser, _winnings);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // VRF RANDOMWORD CHAINLINK IMPLEMENTATION PART\n    //VRF FUNCTIONS AND LOGIC\n    // do a mapping or array which will save the random number to the gameId, then the calculation % will be done at the join the game\n\n    struct subscriptionRequest {\n        uint256 _gameId;\n        bool _fulfilled;\n        uint256[] randomValues;\n    }\n\n    //MAPPING TO MATCH SUBSCRIPTIONID TO THE GAME, BOOL OF FULLFILMENT, AND RANDOMVALUE\n    mapping(uint256 => subscriptionRequest) public wordRequests;\n\n    //START THE VRF RANDOM WORD GENERATOR\n    function requestRandomWords(uint256 _gameId) internal returns (uint256 requestId) {\n        requestId = COORDINATOR.requestRandomWords(\n            s_keyHash,\n            s_subscriptionId,\n            requestConfirmations,\n            s_callbackGasLimit,\n            numWords\n        );\n        wordRequests[requestId] = subscriptionRequest(_gameId, false, new uint256[](0));\n        emit RequestedWinner(requestId);\n        // TEST\n        lastRequestId = requestId;\n        //\n        return requestId;\n    }\n\n    //GET THE WINNER BACK AND END GAME\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n        wordRequests[requestId]._fulfilled = true;\n        wordRequests[requestId].randomValues = randomWords;\n        Symbol creatorSymbol;\n        address creator;\n        address joiner;\n        uint256 winnings;\n        for (uint256 i; i < gamesInProgress.length; i++) {\n            if (gamesInProgress[i]._gameId == wordRequests[requestId]._gameId) {\n                creatorSymbol = gamesInProgress[i]._symbol;\n                creator = gamesInProgress[i]._challenger;\n                joiner = gamesInProgress[i]._joiner;\n                winnings = gamesInProgress[i]._amount * 2;\n                break;\n            }\n        }\n        uint256 headWins;\n        uint256 tailsWins;\n        for (uint256 i = 0; i < numWords; i++) {\n            Symbol winningSymbol = gameLogic(randomWords[i]); // CHANGE GAME LOGIC TO ONLY RECEIVE A UINT256\n            if (winningSymbol == Symbol.Heads) {\n                headWins++;\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Heads);\n            } else {\n                tailsWins++;\n                emit coinFlipResult(wordRequests[requestId]._gameId, Symbol.Tails);\n            }\n            if (headWins > 3) {\n                winningSymbol = Symbol.Heads;\n                if (winningSymbol == creatorSymbol) {\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\n                } else {\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\n                }\n                break;\n            }\n            if (tailsWins > 3) {\n                winningSymbol = Symbol.Tails;\n                if (winningSymbol == creatorSymbol) {\n                    endGame(wordRequests[requestId]._gameId, creator, joiner, winnings);\n                } else {\n                    endGame(wordRequests[requestId]._gameId, joiner, creator, winnings);\n                }\n                break;\n            }\n        }\n    }\n\n    //LOGIC COIN FLIP\n    // if a randomnumber % 100 is more than 50 it is heads, if less then it is tails\n    function gameLogic(uint256 randValue) public view returns (Symbol) {\n        uint256 calc = randValue % 100;\n        Symbol _symbol;\n        if (calc > probability) {\n            _symbol = Symbol.Heads;\n        } else {\n            _symbol = Symbol.Tails;\n        }\n        return _symbol;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n\n    //VIEW FUNCTIONS\n\n    //TO GET THE BALANCE OF A PERSON,  ❗️Do a modifier so you can only see your balance and another function for owner to see everybody balances\n    function balanceOf(address _address) public view returns (uint256) {\n        return balance[_address];\n    }\n\n    //GET THE NUMBER OF GAMES OPEN BASED ON SPECIFIC AMOUNT A USER WANT TO PLAY WITH\n    function allGamesBasedOnAmount(uint256 _amount) public view returns (uint256) {\n        uint256 numberOfGames = 0;\n        for (uint256 i; i < availableGames.length; i++) {\n            if (availableGames[i]._amount == _amount) {\n                numberOfGames++;\n            }\n        }\n        return numberOfGames;\n    }\n\n    //GET THE NUMBER OF AVAILABLE GAMES\n    function allAvailableGames() public view returns (uint256) {\n        return availableGames.length;\n    }\n\n    //GET THE NUMBER OF GAMES IN PROGRESS\n    function allGamesInProgress() public view returns (uint256) {\n        return gamesInProgress.length;\n    }\n\n    //GET THE NUMBER OF FINISHED GAMES\n    function allFinishedGames() public view returns (uint256) {\n        return finishedGames.length;\n    }\n\n    //CHECK WINNER OF THE GAME\n    function viewWinner(uint256 _gameId) public view returns (address) {\n        address viewWinnerAddress;\n        for (uint256 i; i < finishedGames.length; i++) {\n            if (finishedGames[i]._gameId == _gameId) {\n                viewWinnerAddress = finishedGames[i]._winner;\n            }\n        }\n        return viewWinnerAddress;\n    }\n\n    //GET GAME NUMBER\n    function viewGameNumber() public view returns (uint256) {\n        return gameId;\n    }\n\n    //GET GAME FEE\n    function getGameFee() public view returns (uint256) {\n        return gameFee;\n    }\n\n    //TO GET THE RANDOM VALUES - TO TEST THE RANDOMNESS AND GAMELOGIC\n    uint256 lastRequestId;\n\n    function getGameIdRandomValues() public view returns (uint256[] memory) {\n        return wordRequests[lastRequestId].randomValues;\n    }\n}\n\n// THE IMPLEMENTATION OF 7 GAMES, WHICH COULD BE MORE FUN FOR THE USER, TO GET MORE RANDOMNESS AND MORE BELIEF IN LUCK. THE FROND END WILL ACT BASED ON EVENTS AND WILL DEPOSIT WHEN ALL COINS GET FLIPPED\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}